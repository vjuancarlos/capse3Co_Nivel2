
out/c_estilo_snap.elf:     file format elf32-littlearm
out/c_estilo_snap.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000c71

Program Header:
0x70000001 off    0x00011834 vaddr 0x1a001834 paddr 0x1a001834 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000020 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000183c memsz 0x0000183c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00183c align 2**16
         filesz 0x00000044 memsz 0x00000044 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001834  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  10000000  1a00183c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020044  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020044  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020044  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020044  2**2
                  CONTENTS
  6 .bss          00000020  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020044  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020044  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020044  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020044  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a001834  1a001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020044  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020044  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020044  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020044  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020044  2**2
                  CONTENTS
 17 .noinit       00000000  10000068  10000068  00020044  2**2
                  CONTENTS
 18 .debug_info   00011e02  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00002cfb  00000000  00000000  00031e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00000610  00000000  00000000  00034b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00000598  00000000  00000000  00035151  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  0000963e  00000000  00000000  000356e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   0000875c  00000000  00000000  0003ed27  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0001c851  00000000  00000000  00047483  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      0000007f  00000000  00000000  00063cd4  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000039  00000000  00000000  00063d53  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00000dfc  00000000  00000000  00063d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_loc    000043ef  00000000  00000000  00064b88  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001834 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000068 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 snap_es.c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a00032c l     F .text	0000002c Chip_UART_GetIndex
1a0015ac l     O .text	00000008 UART_BClock
1a0015b4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0004a8 l     F .text	000000a0 pll_calc_divs
1a000548 l     F .text	00000100 pll_get_frac
1a000648 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0008bc l     F .text	00000022 Chip_Clock_GetDivRate
10000048 l     O .bss	00000008 audio_usb_pll_freq
1a0015c8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001634 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 board.c
1a000bc8 l     F .text	00000044 Board_LED_Init
1a001684 l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001690 l     O .text	0000000c InitClkStates
1a00169c l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 sapi_datatypes.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a000e90 l     F .text	00000002 errorOcurred
1a000e92 l     F .text	00000002 doNothing
10000004 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00108c l     F .text	00000034 gpioObtainPinConfig
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a000300 l       .text	00000000 __CRP_WORD_END__
1a0002fc l       .text	00000000 __CRP_WORD_START__
1a0006e0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000f14 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a000a4a g     F .text	00000024 Chip_GPIO_SetDir
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000e6c g     F .text	00000024 SysTick_Handler
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a00183c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
53ff6c1e g       *ABS*	00000000 __valid_user_code_checksum
1a00183c g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a000f58 g     F .text	00000044 TIMER3_IRQHandler
1a00095e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a00128c g     F .text	00000000 .hidden __aeabi_uldivmod
10000068 g       .noinit	00000000 _noinit
10000050 g     O .bss	00000004 SystemCoreClock
1a000358 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a0009a8 g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
10000058 g     O .bss	00000008 tickCounter
1a000d30 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0012bc g     F .text	000002dc .hidden __udivmoddi4
1a00167c g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a000de8 g     F .text	00000078 tickConfig
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a0010c0 g     F .text	00000174 gpioConfig
1a001834 g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a000c48 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
10000068 g       .bss	00000000 _ebss
1a000e94 g     F .text	00000040 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a000694 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000f9c g     F .text	000000ee boardConfig
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a000ed4 g     F .text	00000040 TIMER1_IRQHandler
1a000da8 g     F .text	00000002 UART2_IRQHandler
1a000850 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a000dac g     F .text	00000004 sAPI_NullFuncPtr
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a000938 g     F .text	00000026 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a000a48 g     F .text	00000002 Chip_GPIO_Init
1a001680 g     O .text	00000004 OscRateIn
10000068 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001598  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a0006fc g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a00159c g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	0000002c main
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a00096c g     F .text	0000003c Chip_Clock_EnableOpts
1a0016fc g     O .text	00000136 gpioPinsConfig
1a000718 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0009f4 g     F .text	00000054 fpuInit
1a0007d0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000cec g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a000db0 g     F .text	00000038 delay
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001234 g     F .text	00000056 gpioWrite
1a000cf8 g     F .text	00000038 Board_SetupMuxing
1a0003ac g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000e60 g     F .text	0000000c tickRead
10000060 g     O .bss	00000008 tickRateMS
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g     O .data	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000068 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a000c20 g     F .text	00000028 Board_Debug_Init
10000044 g       .data	00000000 _edata
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a000a70 g     F .text	00000158 Chip_SetupCoreClock
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a000c70 g     F .text	0000007c ResetISR
1a000494 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001598  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a000daa g     F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a000c0c g     F .text	00000014 Board_UART_Init
1a0008e0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a000d9c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 71 0c 00 1a 79 01 00 1a 7b 01 00 1a     ....q...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 1e 6c ff 53     }............l.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	6d 0e 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     m...............
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a 95 0e 00 1a d5 0e 00 1a 15 0f 00 1a     ................
1a00007c:	59 0f 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     Y...............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a bd 01 00 1a 8b 01 00 1a a9 0d 00 1a     ................
1a0000ac:	ab 0d 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a00183c 	.word	0x1a00183c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000044 	.word	0x00000044
1a000120:	1a00183c 	.word	0x1a00183c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00183c 	.word	0x1a00183c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00183c 	.word	0x1a00183c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00183c 	.word	0x1a00183c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000020 	.word	0x00000020
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr

1a0001bc <UART0_IRQHandler>:
/*==================[ISR external functions definition]======================*/

__attribute__ ((section(".after_vectors")))

/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
1a0001bc:	4770      	bx	lr
1a0001be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
 

/*==================[programa principal]=====================================*/

programa()
{
1a000300:	b508      	push	{r3, lr}
   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   configurarPlataforma();   
1a000302:	f000 fe4b 	bl	1a000f9c <boardConfig>
   // ---------- REPETIR POR SIEMPRE --------------------------
   porSiempre()
   {      
     // if(dir == FALSE)
     // {
      	fijarPinDigitalEn(0, 0 );
1a000306:	2100      	movs	r1, #0
1a000308:	4608      	mov	r0, r1
1a00030a:	f000 ff93 	bl	1a001234 <gpioWrite>
      	esperarSegs(1); 
1a00030e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000312:	2100      	movs	r1, #0
1a000314:	f000 fd4c 	bl	1a000db0 <delay>
      	fijarPinDigitalEn(1, 1 );
1a000318:	2101      	movs	r1, #1
1a00031a:	4608      	mov	r0, r1
1a00031c:	f000 ff8a 	bl	1a001234 <gpioWrite>
      	esperarSegs(1); 
1a000320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000324:	2100      	movs	r1, #0
1a000326:	f000 fd43 	bl	1a000db0 <delay>
1a00032a:	e7ec      	b.n	1a000306 <main+0x6>

1a00032c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a00032c:	4b09      	ldr	r3, [pc, #36]	; (1a000354 <Chip_UART_GetIndex+0x28>)
1a00032e:	4298      	cmp	r0, r3
1a000330:	d009      	beq.n	1a000346 <Chip_UART_GetIndex+0x1a>
1a000332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000336:	4298      	cmp	r0, r3
1a000338:	d007      	beq.n	1a00034a <Chip_UART_GetIndex+0x1e>
1a00033a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00033e:	4298      	cmp	r0, r3
1a000340:	d005      	beq.n	1a00034e <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a000342:	2000      	movs	r0, #0
1a000344:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a000346:	2002      	movs	r0, #2
1a000348:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a00034a:	2003      	movs	r0, #3
1a00034c:	4770      	bx	lr
           return 1;
1a00034e:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a000350:	4770      	bx	lr
1a000352:	bf00      	nop
1a000354:	400c1000 	.word	0x400c1000

1a000358 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000358:	b530      	push	{r4, r5, lr}
1a00035a:	b083      	sub	sp, #12
1a00035c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00035e:	f7ff ffe5 	bl	1a00032c <Chip_UART_GetIndex>
1a000362:	2301      	movs	r3, #1
1a000364:	461a      	mov	r2, r3
1a000366:	4619      	mov	r1, r3
1a000368:	4d0e      	ldr	r5, [pc, #56]	; (1a0003a4 <Chip_UART_Init+0x4c>)
1a00036a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00036e:	f000 fafd 	bl	1a00096c <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a000372:	2307      	movs	r3, #7
1a000374:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000376:	2300      	movs	r3, #0
1a000378:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a00037a:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a00037c:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a00037e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000380:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a000382:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000384:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000386:	4b08      	ldr	r3, [pc, #32]	; (1a0003a8 <Chip_UART_Init+0x50>)
1a000388:	429c      	cmp	r4, r3
1a00038a:	d005      	beq.n	1a000398 <Chip_UART_Init+0x40>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a00038c:	2303      	movs	r3, #3
1a00038e:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a000390:	2310      	movs	r3, #16
1a000392:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a000394:	b003      	add	sp, #12
1a000396:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a000398:	2300      	movs	r3, #0
1a00039a:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a00039c:	69a3      	ldr	r3, [r4, #24]
1a00039e:	9301      	str	r3, [sp, #4]
1a0003a0:	e7f4      	b.n	1a00038c <Chip_UART_Init+0x34>
1a0003a2:	bf00      	nop
1a0003a4:	1a0015b4 	.word	0x1a0015b4
1a0003a8:	40082000 	.word	0x40082000

1a0003ac <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0003ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0003b0:	b083      	sub	sp, #12
1a0003b2:	4683      	mov	fp, r0
1a0003b4:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0003b6:	f7ff ffb9 	bl	1a00032c <Chip_UART_GetIndex>
1a0003ba:	4b35      	ldr	r3, [pc, #212]	; (1a000490 <Chip_UART_SetBaudFDR+0xe4>)
1a0003bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0003c0:	f000 faf2 	bl	1a0009a8 <Chip_Clock_GetRate>
1a0003c4:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a0003c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a0003ca:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a0003cc:	2300      	movs	r3, #0
1a0003ce:	9301      	str	r3, [sp, #4]
1a0003d0:	46a2      	mov	sl, r4
1a0003d2:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a0003d4:	e02a      	b.n	1a00042c <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a0003d6:	4243      	negs	r3, r0
               div ++;
1a0003d8:	1c4a      	adds	r2, r1, #1
1a0003da:	e017      	b.n	1a00040c <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a0003dc:	b30b      	cbz	r3, 1a000422 <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a0003de:	461f      	mov	r7, r3
           sd = d;
1a0003e0:	9501      	str	r5, [sp, #4]
           sm = m;
1a0003e2:	46a2      	mov	sl, r4
           sdiv = div;
1a0003e4:	4691      	mov	r9, r2
       for (d = 0; d < m; d++) {
1a0003e6:	3501      	adds	r5, #1
1a0003e8:	42ac      	cmp	r4, r5
1a0003ea:	d91e      	bls.n	1a00042a <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0003ec:	0933      	lsrs	r3, r6, #4
1a0003ee:	0730      	lsls	r0, r6, #28
1a0003f0:	fba4 0100 	umull	r0, r1, r4, r0
1a0003f4:	fb04 1103 	mla	r1, r4, r3, r1
1a0003f8:	1962      	adds	r2, r4, r5
1a0003fa:	fb08 f202 	mul.w	r2, r8, r2
1a0003fe:	2300      	movs	r3, #0
1a000400:	f000 ff44 	bl	1a00128c <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a000404:	4603      	mov	r3, r0
           div = (uint32_t) (dval >> 32);
1a000406:	460a      	mov	r2, r1
           if ((int)diff < 0) {
1a000408:	2800      	cmp	r0, #0
1a00040a:	dbe4      	blt.n	1a0003d6 <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00040c:	429f      	cmp	r7, r3
1a00040e:	d3ea      	bcc.n	1a0003e6 <Chip_UART_SetBaudFDR+0x3a>
1a000410:	2a00      	cmp	r2, #0
1a000412:	d0e8      	beq.n	1a0003e6 <Chip_UART_SetBaudFDR+0x3a>
1a000414:	0c11      	lsrs	r1, r2, #16
1a000416:	d1e6      	bne.n	1a0003e6 <Chip_UART_SetBaudFDR+0x3a>
1a000418:	2a02      	cmp	r2, #2
1a00041a:	d8df      	bhi.n	1a0003dc <Chip_UART_SetBaudFDR+0x30>
1a00041c:	2d00      	cmp	r5, #0
1a00041e:	d1e2      	bne.n	1a0003e6 <Chip_UART_SetBaudFDR+0x3a>
1a000420:	e7dc      	b.n	1a0003dc <Chip_UART_SetBaudFDR+0x30>
           odiff = diff;
1a000422:	461f      	mov	r7, r3
           sd = d;
1a000424:	9501      	str	r5, [sp, #4]
           sm = m;
1a000426:	46a2      	mov	sl, r4
           sdiv = div;
1a000428:	4691      	mov	r9, r2
   for (m = 1; odiff && m < 16; m++) {
1a00042a:	3401      	adds	r4, #1
1a00042c:	b11f      	cbz	r7, 1a000436 <Chip_UART_SetBaudFDR+0x8a>
1a00042e:	2c0f      	cmp	r4, #15
1a000430:	d801      	bhi.n	1a000436 <Chip_UART_SetBaudFDR+0x8a>
1a000432:	2500      	movs	r5, #0
1a000434:	e7d8      	b.n	1a0003e8 <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000436:	f1b9 0f00 	cmp.w	r9, #0
1a00043a:	d024      	beq.n	1a000486 <Chip_UART_SetBaudFDR+0xda>
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a00043c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000444:	f8cb 300c 	str.w	r3, [fp, #12]
1a000448:	fa5f f389 	uxtb.w	r3, r9
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a00044c:	f8cb 3000 	str.w	r3, [fp]
1a000450:	f3c9 2307 	ubfx	r3, r9, #8, #8
   pUART->DLM = (uint32_t) dlm;
1a000454:	f8cb 3004 	str.w	r3, [fp, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000458:	f8db 300c 	ldr.w	r3, [fp, #12]
1a00045c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000460:	f8cb 300c 	str.w	r3, [fp, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000464:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000468:	b2db      	uxtb	r3, r3
1a00046a:	9901      	ldr	r1, [sp, #4]
1a00046c:	f001 020f 	and.w	r2, r1, #15
1a000470:	4313      	orrs	r3, r2
1a000472:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000476:	0933      	lsrs	r3, r6, #4
1a000478:	fb03 f30a 	mul.w	r3, r3, sl
1a00047c:	448a      	add	sl, r1
1a00047e:	fb0a f909 	mul.w	r9, sl, r9
1a000482:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000486:	4648      	mov	r0, r9
1a000488:	b003      	add	sp, #12
1a00048a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00048e:	bf00      	nop
1a000490:	1a0015ac 	.word	0x1a0015ac

1a000494 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000494:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000496:	2069      	movs	r0, #105	; 0x69
1a000498:	f000 fa86 	bl	1a0009a8 <Chip_Clock_GetRate>
1a00049c:	4b01      	ldr	r3, [pc, #4]	; (1a0004a4 <SystemCoreClockUpdate+0x10>)
1a00049e:	6018      	str	r0, [r3, #0]
1a0004a0:	bd08      	pop	{r3, pc}
1a0004a2:	bf00      	nop
1a0004a4:	10000050 	.word	0x10000050

1a0004a8 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0004a8:	b5f0      	push	{r4, r5, r6, r7, lr}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a0004aa:	680b      	ldr	r3, [r1, #0]
1a0004ac:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0004b0:	d002      	beq.n	1a0004b8 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a0004b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0004b6:	600b      	str	r3, [r1, #0]
1a0004b8:	4607      	mov	r7, r0
1a0004ba:	2501      	movs	r5, #1
1a0004bc:	e03b      	b.n	1a000536 <pll_calc_divs+0x8e>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a0004be:	694b      	ldr	r3, [r1, #20]
1a0004c0:	fb03 f302 	mul.w	r3, r3, r2
1a0004c4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0004c8:	e014      	b.n	1a0004f4 <pll_calc_divs+0x4c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a0004ca:	461c      	mov	r4, r3
1a0004cc:	e020      	b.n	1a000510 <pll_calc_divs+0x68>
       return -val;
1a0004ce:	f1ce 0e00 	rsb	lr, lr, #0
1a0004d2:	e020      	b.n	1a000516 <pll_calc_divs+0x6e>
           for (m = 1; m <= 256; m++) {
1a0004d4:	3201      	adds	r2, #1
1a0004d6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0004da:	dc26      	bgt.n	1a00052a <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 6)) {
1a0004dc:	680c      	ldr	r4, [r1, #0]
1a0004de:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0004e2:	d0ec      	beq.n	1a0004be <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0004e4:	1c73      	adds	r3, r6, #1
1a0004e6:	fa02 fe03 	lsl.w	lr, r2, r3
1a0004ea:	694b      	ldr	r3, [r1, #20]
1a0004ec:	fb03 f30e 	mul.w	r3, r3, lr
1a0004f0:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0004f4:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a000540 <pll_calc_divs+0x98>
1a0004f8:	4573      	cmp	r3, lr
1a0004fa:	d9eb      	bls.n	1a0004d4 <pll_calc_divs+0x2c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a0004fc:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a000544 <pll_calc_divs+0x9c>
1a000500:	4573      	cmp	r3, lr
1a000502:	d812      	bhi.n	1a00052a <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 7)) {
1a000504:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000508:	d1df      	bne.n	1a0004ca <pll_calc_divs+0x22>
               } else {
                   fout = fcco >> (p + 1);
1a00050a:	1c74      	adds	r4, r6, #1
1a00050c:	fa23 f404 	lsr.w	r4, r3, r4
   if (val < 0)
1a000510:	ebb0 0e04 	subs.w	lr, r0, r4
1a000514:	d4db      	bmi.n	1a0004ce <pll_calc_divs+0x26>
               }

               if (ABS(freq - fout) < prev) {
1a000516:	4577      	cmp	r7, lr
1a000518:	d9dc      	bls.n	1a0004d4 <pll_calc_divs+0x2c>
                   ppll->nsel = n;
1a00051a:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a00051c:	1c77      	adds	r7, r6, #1
1a00051e:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a000520:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a000522:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a000524:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a000526:	4677      	mov	r7, lr
1a000528:	e7d4      	b.n	1a0004d4 <pll_calc_divs+0x2c>
       for (p = 0; p < 4; p ++) {
1a00052a:	3601      	adds	r6, #1
1a00052c:	2e03      	cmp	r6, #3
1a00052e:	dc01      	bgt.n	1a000534 <pll_calc_divs+0x8c>
1a000530:	2201      	movs	r2, #1
1a000532:	e7d0      	b.n	1a0004d6 <pll_calc_divs+0x2e>
   for (n = 1; n <= 4; n++) {
1a000534:	3501      	adds	r5, #1
1a000536:	2d04      	cmp	r5, #4
1a000538:	dc01      	bgt.n	1a00053e <pll_calc_divs+0x96>
1a00053a:	2600      	movs	r6, #0
1a00053c:	e7f6      	b.n	1a00052c <pll_calc_divs+0x84>
               }
           }
       }
   }
}
1a00053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000540:	094c5eff 	.word	0x094c5eff
1a000544:	1312d000 	.word	0x1312d000

1a000548 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000548:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00054a:	b099      	sub	sp, #100	; 0x64
1a00054c:	4605      	mov	r5, r0
1a00054e:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000550:	2260      	movs	r2, #96	; 0x60
1a000552:	2100      	movs	r1, #0
1a000554:	4668      	mov	r0, sp
1a000556:	f001 f821 	bl	1a00159c <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a00055a:	2380      	movs	r3, #128	; 0x80
1a00055c:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a00055e:	6963      	ldr	r3, [r4, #20]
1a000560:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a000562:	7923      	ldrb	r3, [r4, #4]
1a000564:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a000568:	4669      	mov	r1, sp
1a00056a:	4628      	mov	r0, r5
1a00056c:	f7ff ff9c 	bl	1a0004a8 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a000570:	9b06      	ldr	r3, [sp, #24]
1a000572:	429d      	cmp	r5, r3
1a000574:	d02f      	beq.n	1a0005d6 <pll_get_frac+0x8e>
   if (val < 0)
1a000576:	1aeb      	subs	r3, r5, r3
1a000578:	d436      	bmi.n	1a0005e8 <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a00057a:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a00057c:	2340      	movs	r3, #64	; 0x40
1a00057e:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a000580:	6963      	ldr	r3, [r4, #20]
1a000582:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a000584:	7923      	ldrb	r3, [r4, #4]
1a000586:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a00058a:	a910      	add	r1, sp, #64	; 0x40
1a00058c:	4628      	mov	r0, r5
1a00058e:	f7ff ff8b 	bl	1a0004a8 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a000592:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000594:	429d      	cmp	r5, r3
1a000596:	d029      	beq.n	1a0005ec <pll_get_frac+0xa4>
   if (val < 0)
1a000598:	1aeb      	subs	r3, r5, r3
1a00059a:	d42f      	bmi.n	1a0005fc <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a00059c:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a00059e:	2340      	movs	r3, #64	; 0x40
1a0005a0:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a0005a2:	6963      	ldr	r3, [r4, #20]
1a0005a4:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a0005a6:	7923      	ldrb	r3, [r4, #4]
1a0005a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a0005ac:	a908      	add	r1, sp, #32
1a0005ae:	4628      	mov	r0, r5
1a0005b0:	f7ff ff7a 	bl	1a0004a8 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a0005b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0005b6:	429d      	cmp	r5, r3
1a0005b8:	d022      	beq.n	1a000600 <pll_get_frac+0xb8>
   if (val < 0)
1a0005ba:	1aed      	subs	r5, r5, r3
1a0005bc:	d428      	bmi.n	1a000610 <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a0005be:	42ae      	cmp	r6, r5
1a0005c0:	dc30      	bgt.n	1a000624 <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a0005c2:	42be      	cmp	r6, r7
1a0005c4:	dc26      	bgt.n	1a000614 <pll_get_frac+0xcc>
           *ppll = pll[0];
1a0005c6:	466d      	mov	r5, sp
1a0005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0005cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0005d4:	e006      	b.n	1a0005e4 <pll_get_frac+0x9c>
       *ppll = pll[0];
1a0005d6:	466d      	mov	r5, sp
1a0005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0005dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0005e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a0005e4:	b019      	add	sp, #100	; 0x64
1a0005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a0005e8:	425b      	negs	r3, r3
1a0005ea:	e7c6      	b.n	1a00057a <pll_get_frac+0x32>
       *ppll = pll[2];
1a0005ec:	ad10      	add	r5, sp, #64	; 0x40
1a0005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0005f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0005f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0005fa:	e7f3      	b.n	1a0005e4 <pll_get_frac+0x9c>
       return -val;
1a0005fc:	425b      	negs	r3, r3
1a0005fe:	e7cd      	b.n	1a00059c <pll_get_frac+0x54>
       *ppll = pll[1];
1a000600:	ad08      	add	r5, sp, #32
1a000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000606:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00060a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a00060e:	e7e9      	b.n	1a0005e4 <pll_get_frac+0x9c>
       return -val;
1a000610:	426d      	negs	r5, r5
1a000612:	e7d4      	b.n	1a0005be <pll_get_frac+0x76>
           *ppll = pll[2];
1a000614:	ad10      	add	r5, sp, #64	; 0x40
1a000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00061a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00061e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000622:	e7df      	b.n	1a0005e4 <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a000624:	42af      	cmp	r7, r5
1a000626:	db07      	blt.n	1a000638 <pll_get_frac+0xf0>
           *ppll = pll[1];
1a000628:	ad08      	add	r5, sp, #32
1a00062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00062e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000632:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000636:	e7d5      	b.n	1a0005e4 <pll_get_frac+0x9c>
           *ppll = pll[2];
1a000638:	ad10      	add	r5, sp, #64	; 0x40
1a00063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00063e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000646:	e7cd      	b.n	1a0005e4 <pll_get_frac+0x9c>

1a000648 <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000648:	b430      	push	{r4, r5}
1a00064a:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a00064c:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00064e:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000650:	e000      	b.n	1a000654 <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a000652:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000654:	281c      	cmp	r0, #28
1a000656:	d118      	bne.n	1a00068a <Chip_Clock_FindBaseClock+0x42>
1a000658:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00065c:	0051      	lsls	r1, r2, #1
1a00065e:	4a0c      	ldr	r2, [pc, #48]	; (1a000690 <Chip_Clock_FindBaseClock+0x48>)
1a000660:	440a      	add	r2, r1
1a000662:	7914      	ldrb	r4, [r2, #4]
1a000664:	42a0      	cmp	r0, r4
1a000666:	d010      	beq.n	1a00068a <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000668:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a00066c:	004a      	lsls	r2, r1, #1
1a00066e:	4908      	ldr	r1, [pc, #32]	; (1a000690 <Chip_Clock_FindBaseClock+0x48>)
1a000670:	5a8a      	ldrh	r2, [r1, r2]
1a000672:	42aa      	cmp	r2, r5
1a000674:	d8ed      	bhi.n	1a000652 <Chip_Clock_FindBaseClock+0xa>
1a000676:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00067a:	0051      	lsls	r1, r2, #1
1a00067c:	4a04      	ldr	r2, [pc, #16]	; (1a000690 <Chip_Clock_FindBaseClock+0x48>)
1a00067e:	440a      	add	r2, r1
1a000680:	8852      	ldrh	r2, [r2, #2]
1a000682:	4295      	cmp	r5, r2
1a000684:	d8e5      	bhi.n	1a000652 <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a000686:	4620      	mov	r0, r4
1a000688:	e7e4      	b.n	1a000654 <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a00068a:	bc30      	pop	{r4, r5}
1a00068c:	4770      	bx	lr
1a00068e:	bf00      	nop
1a000690:	1a0015c8 	.word	0x1a0015c8

1a000694 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000694:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00069a:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a00069c:	4a0d      	ldr	r2, [pc, #52]	; (1a0006d4 <Chip_Clock_EnableCrystal+0x40>)
1a00069e:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a0006a0:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0006a4:	6992      	ldr	r2, [r2, #24]
1a0006a6:	4291      	cmp	r1, r2
1a0006a8:	d001      	beq.n	1a0006ae <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0006aa:	4a0a      	ldr	r2, [pc, #40]	; (1a0006d4 <Chip_Clock_EnableCrystal+0x40>)
1a0006ac:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a0006ae:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a0006b2:	4a09      	ldr	r2, [pc, #36]	; (1a0006d8 <Chip_Clock_EnableCrystal+0x44>)
1a0006b4:	6811      	ldr	r1, [r2, #0]
1a0006b6:	4a09      	ldr	r2, [pc, #36]	; (1a0006dc <Chip_Clock_EnableCrystal+0x48>)
1a0006b8:	4291      	cmp	r1, r2
1a0006ba:	d901      	bls.n	1a0006c0 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a0006bc:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0006c0:	4a04      	ldr	r2, [pc, #16]	; (1a0006d4 <Chip_Clock_EnableCrystal+0x40>)
1a0006c2:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a0006c4:	9b01      	ldr	r3, [sp, #4]
1a0006c6:	1e5a      	subs	r2, r3, #1
1a0006c8:	9201      	str	r2, [sp, #4]
1a0006ca:	2b00      	cmp	r3, #0
1a0006cc:	d1fa      	bne.n	1a0006c4 <Chip_Clock_EnableCrystal+0x30>
}
1a0006ce:	b002      	add	sp, #8
1a0006d0:	4770      	bx	lr
1a0006d2:	bf00      	nop
1a0006d4:	40050000 	.word	0x40050000
1a0006d8:	1a001680 	.word	0x1a001680
1a0006dc:	01312cff 	.word	0x01312cff

1a0006e0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0006e0:	3012      	adds	r0, #18
1a0006e2:	4b05      	ldr	r3, [pc, #20]	; (1a0006f8 <Chip_Clock_GetDividerSource+0x18>)
1a0006e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a0006e8:	f010 0f01 	tst.w	r0, #1
1a0006ec:	d001      	beq.n	1a0006f2 <Chip_Clock_GetDividerSource+0x12>
       return CLKINPUT_PD;
1a0006ee:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0006f0:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0006f2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0006f6:	4770      	bx	lr
1a0006f8:	40050000 	.word	0x40050000

1a0006fc <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0006fc:	f100 0212 	add.w	r2, r0, #18
1a000700:	4b03      	ldr	r3, [pc, #12]	; (1a000710 <Chip_Clock_GetDividerDivisor+0x14>)
1a000702:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000706:	4b03      	ldr	r3, [pc, #12]	; (1a000714 <Chip_Clock_GetDividerDivisor+0x18>)
1a000708:	5c18      	ldrb	r0, [r3, r0]
}
1a00070a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00070e:	4770      	bx	lr
1a000710:	40050000 	.word	0x40050000
1a000714:	1a0015c0 	.word	0x1a0015c0

1a000718 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000718:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a00071a:	2810      	cmp	r0, #16
1a00071c:	d80a      	bhi.n	1a000734 <Chip_Clock_GetClockInputHz+0x1c>
1a00071e:	e8df f000 	tbb	[pc, r0]
1a000722:	0b44      	.short	0x0b44
1a000724:	0921180d 	.word	0x0921180d
1a000728:	2d2a2724 	.word	0x2d2a2724
1a00072c:	34300909 	.word	0x34300909
1a000730:	3c38      	.short	0x3c38
1a000732:	40          	.byte	0x40
1a000733:	00          	.byte	0x00
   uint32_t rate = 0;
1a000734:	2000      	movs	r0, #0
1a000736:	bd08      	pop	{r3, pc}
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a000738:	481e      	ldr	r0, [pc, #120]	; (1a0007b4 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a00073a:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00073c:	4b1e      	ldr	r3, [pc, #120]	; (1a0007b8 <Chip_Clock_GetClockInputHz+0xa0>)
1a00073e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000742:	f003 0307 	and.w	r3, r3, #7
1a000746:	2b04      	cmp	r3, #4
1a000748:	d001      	beq.n	1a00074e <Chip_Clock_GetClockInputHz+0x36>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a00074a:	481c      	ldr	r0, [pc, #112]	; (1a0007bc <Chip_Clock_GetClockInputHz+0xa4>)
1a00074c:	bd08      	pop	{r3, pc}
   uint32_t rate = 0;
1a00074e:	2000      	movs	r0, #0
1a000750:	bd08      	pop	{r3, pc}
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000752:	4b19      	ldr	r3, [pc, #100]	; (1a0007b8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000754:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000758:	f003 0307 	and.w	r3, r3, #7
1a00075c:	2b04      	cmp	r3, #4
1a00075e:	d027      	beq.n	1a0007b0 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a000760:	4816      	ldr	r0, [pc, #88]	; (1a0007bc <Chip_Clock_GetClockInputHz+0xa4>)
1a000762:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a000764:	4b16      	ldr	r3, [pc, #88]	; (1a0007c0 <Chip_Clock_GetClockInputHz+0xa8>)
1a000766:	6818      	ldr	r0, [r3, #0]
       break;
1a000768:	bd08      	pop	{r3, pc}

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a00076a:	4b16      	ldr	r3, [pc, #88]	; (1a0007c4 <Chip_Clock_GetClockInputHz+0xac>)
1a00076c:	6818      	ldr	r0, [r3, #0]
       break;
1a00076e:	bd08      	pop	{r3, pc}

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000770:	4b15      	ldr	r3, [pc, #84]	; (1a0007c8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000772:	6818      	ldr	r0, [r3, #0]
       break;
1a000774:	bd08      	pop	{r3, pc}

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000776:	4b14      	ldr	r3, [pc, #80]	; (1a0007c8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000778:	6858      	ldr	r0, [r3, #4]
       break;
1a00077a:	bd08      	pop	{r3, pc}

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a00077c:	f000 f868 	bl	1a000850 <Chip_Clock_GetMainPLLHz>
       break;
1a000780:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000782:	2100      	movs	r1, #0
1a000784:	f000 f89a 	bl	1a0008bc <Chip_Clock_GetDivRate>
       break;
1a000788:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00078a:	2101      	movs	r1, #1
1a00078c:	f000 f896 	bl	1a0008bc <Chip_Clock_GetDivRate>
       break;
1a000790:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000792:	2102      	movs	r1, #2
1a000794:	f000 f892 	bl	1a0008bc <Chip_Clock_GetDivRate>
       break;
1a000798:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00079a:	2103      	movs	r1, #3
1a00079c:	f000 f88e 	bl	1a0008bc <Chip_Clock_GetDivRate>
       break;
1a0007a0:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0007a2:	2104      	movs	r1, #4
1a0007a4:	f000 f88a 	bl	1a0008bc <Chip_Clock_GetDivRate>
       break;
1a0007a8:	bd08      	pop	{r3, pc}
       rate = CRYSTAL_32K_FREQ_IN;
1a0007aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0007ae:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
1a0007b0:	4806      	ldr	r0, [pc, #24]	; (1a0007cc <Chip_Clock_GetClockInputHz+0xb4>)
   default:
       break;
   }

   return rate;
}
1a0007b2:	bd08      	pop	{r3, pc}
1a0007b4:	00b71b00 	.word	0x00b71b00
1a0007b8:	40043000 	.word	0x40043000
1a0007bc:	017d7840 	.word	0x017d7840
1a0007c0:	1a00167c 	.word	0x1a00167c
1a0007c4:	1a001680 	.word	0x1a001680
1a0007c8:	10000048 	.word	0x10000048
1a0007cc:	02faf080 	.word	0x02faf080

1a0007d0 <Chip_Clock_CalcMainPLLValue>:
{
1a0007d0:	b538      	push	{r3, r4, r5, lr}
1a0007d2:	4605      	mov	r5, r0
1a0007d4:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0007d6:	7908      	ldrb	r0, [r1, #4]
1a0007d8:	f7ff ff9e 	bl	1a000718 <Chip_Clock_GetClockInputHz>
1a0007dc:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0007de:	4b19      	ldr	r3, [pc, #100]	; (1a000844 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0007e0:	442b      	add	r3, r5
1a0007e2:	4a19      	ldr	r2, [pc, #100]	; (1a000848 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0007e4:	4293      	cmp	r3, r2
1a0007e6:	d821      	bhi.n	1a00082c <Chip_Clock_CalcMainPLLValue+0x5c>
1a0007e8:	b318      	cbz	r0, 1a000832 <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0007ea:	2380      	movs	r3, #128	; 0x80
1a0007ec:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a0007ee:	2300      	movs	r3, #0
1a0007f0:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a0007f2:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a0007f4:	fbb5 f3f0 	udiv	r3, r5, r0
1a0007f8:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0007fa:	4a14      	ldr	r2, [pc, #80]	; (1a00084c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0007fc:	4295      	cmp	r5, r2
1a0007fe:	d903      	bls.n	1a000808 <Chip_Clock_CalcMainPLLValue+0x38>
1a000800:	fb03 f000 	mul.w	r0, r3, r0
1a000804:	4285      	cmp	r5, r0
1a000806:	d007      	beq.n	1a000818 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a000808:	4621      	mov	r1, r4
1a00080a:	4628      	mov	r0, r5
1a00080c:	f7ff fe9c 	bl	1a000548 <pll_get_frac>
       if (!ppll->nsel) {
1a000810:	68a3      	ldr	r3, [r4, #8]
1a000812:	b18b      	cbz	r3, 1a000838 <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a000814:	3b01      	subs	r3, #1
1a000816:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a000818:	6923      	ldr	r3, [r4, #16]
1a00081a:	b183      	cbz	r3, 1a00083e <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a00081c:	68e2      	ldr	r2, [r4, #12]
1a00081e:	b10a      	cbz	r2, 1a000824 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a000820:	3a01      	subs	r2, #1
1a000822:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a000824:	3b01      	subs	r3, #1
1a000826:	6123      	str	r3, [r4, #16]
   return 0;
1a000828:	2000      	movs	r0, #0
1a00082a:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a00082c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000830:	bd38      	pop	{r3, r4, r5, pc}
1a000832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000836:	bd38      	pop	{r3, r4, r5, pc}
           return -1;
1a000838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00083c:	bd38      	pop	{r3, r4, r5, pc}
       return - 1;
1a00083e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000842:	bd38      	pop	{r3, r4, r5, pc}
1a000844:	ff6b3a10 	.word	0xff6b3a10
1a000848:	0b940510 	.word	0x0b940510
1a00084c:	094c5eff 	.word	0x094c5eff

1a000850 <Chip_Clock_GetMainPLLHz>:
{
1a000850:	b530      	push	{r4, r5, lr}
1a000852:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000854:	4d17      	ldr	r5, [pc, #92]	; (1a0008b4 <Chip_Clock_GetMainPLLHz+0x64>)
1a000856:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000858:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00085c:	f7ff ff5c 	bl	1a000718 <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000860:	4b15      	ldr	r3, [pc, #84]	; (1a0008b8 <Chip_Clock_GetMainPLLHz+0x68>)
1a000862:	681b      	ldr	r3, [r3, #0]
1a000864:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000866:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000868:	f013 0f01 	tst.w	r3, #1
1a00086c:	d01f      	beq.n	1a0008ae <Chip_Clock_GetMainPLLHz+0x5e>
   msel = (PLLReg >> 16) & 0xFF;
1a00086e:	f3c4 4207 	ubfx	r2, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000872:	f3c4 3301 	ubfx	r3, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a000876:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a00087a:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a00087e:	3201      	adds	r2, #1
   n = nsel + 1;
1a000880:	3301      	adds	r3, #1
   p = ptab[psel];
1a000882:	f10d 0e08 	add.w	lr, sp, #8
1a000886:	4471      	add	r1, lr
1a000888:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a00088c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000890:	d108      	bne.n	1a0008a4 <Chip_Clock_GetMainPLLHz+0x54>
1a000892:	b93d      	cbnz	r5, 1a0008a4 <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a000894:	0049      	lsls	r1, r1, #1
1a000896:	fbb2 f2f1 	udiv	r2, r2, r1
1a00089a:	fbb0 f0f3 	udiv	r0, r0, r3
1a00089e:	fb00 f002 	mul.w	r0, r0, r2
1a0008a2:	e005      	b.n	1a0008b0 <Chip_Clock_GetMainPLLHz+0x60>
       return m * (freq / n);
1a0008a4:	fbb0 f0f3 	udiv	r0, r0, r3
1a0008a8:	fb00 f002 	mul.w	r0, r0, r2
1a0008ac:	e000      	b.n	1a0008b0 <Chip_Clock_GetMainPLLHz+0x60>
       return 0;
1a0008ae:	2000      	movs	r0, #0
}
1a0008b0:	b003      	add	sp, #12
1a0008b2:	bd30      	pop	{r4, r5, pc}
1a0008b4:	40050000 	.word	0x40050000
1a0008b8:	1a0015bc 	.word	0x1a0015bc

1a0008bc <Chip_Clock_GetDivRate>:
{
1a0008bc:	b538      	push	{r3, r4, r5, lr}
1a0008be:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a0008c0:	4608      	mov	r0, r1
1a0008c2:	f7ff ff0d 	bl	1a0006e0 <Chip_Clock_GetDividerSource>
1a0008c6:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a0008c8:	4620      	mov	r0, r4
1a0008ca:	f7ff ff17 	bl	1a0006fc <Chip_Clock_GetDividerDivisor>
1a0008ce:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0008d0:	4628      	mov	r0, r5
1a0008d2:	f7ff ff21 	bl	1a000718 <Chip_Clock_GetClockInputHz>
1a0008d6:	3401      	adds	r4, #1
}
1a0008d8:	fbb0 f0f4 	udiv	r0, r0, r4
1a0008dc:	bd38      	pop	{r3, r4, r5, pc}
1a0008de:	Address 0x000000001a0008de is out of bounds.


1a0008e0 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0008e0:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0008e2:	f100 0416 	add.w	r4, r0, #22
1a0008e6:	00a4      	lsls	r4, r4, #2
1a0008e8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0008ec:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0008f0:	6865      	ldr	r5, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a0008f2:	281b      	cmp	r0, #27
1a0008f4:	d813      	bhi.n	1a00091e <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a0008f6:	2911      	cmp	r1, #17
1a0008f8:	d01a      	beq.n	1a000930 <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0008fa:	4c0e      	ldr	r4, [pc, #56]	; (1a000934 <Chip_Clock_SetBaseClock+0x54>)
1a0008fc:	402c      	ands	r4, r5

           if (autoblocken) {
1a0008fe:	b10a      	cbz	r2, 1a000904 <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a000900:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
           }
           if (powerdn) {
1a000904:	b10b      	cbz	r3, 1a00090a <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a000906:	f044 0401 	orr.w	r4, r4, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a00090a:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00090e:	3016      	adds	r0, #22
1a000910:	0080      	lsls	r0, r0, #2
1a000912:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000916:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00091a:	6044      	str	r4, [r0, #4]
1a00091c:	e008      	b.n	1a000930 <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a00091e:	f045 0501 	orr.w	r5, r5, #1
1a000922:	3016      	adds	r0, #22
1a000924:	0080      	lsls	r0, r0, #2
1a000926:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00092a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00092e:	6045      	str	r5, [r0, #4]
   }
}
1a000930:	bc30      	pop	{r4, r5}
1a000932:	4770      	bx	lr
1a000934:	e0fff7fe 	.word	0xe0fff7fe

1a000938 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a000938:	281b      	cmp	r0, #27
1a00093a:	d901      	bls.n	1a000940 <Chip_Clock_GetBaseClock+0x8>
       return CLKINPUT_PD;
1a00093c:	2011      	movs	r0, #17
1a00093e:	4770      	bx	lr
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000940:	3016      	adds	r0, #22
1a000942:	0080      	lsls	r0, r0, #2
1a000944:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000948:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00094c:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a00094e:	f010 0f01 	tst.w	r0, #1
1a000952:	d001      	beq.n	1a000958 <Chip_Clock_GetBaseClock+0x20>
       return CLKINPUT_PD;
1a000954:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000956:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000958:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00095c:	4770      	bx	lr

1a00095e <Chip_Clock_GetBaseClocktHz>:
{
1a00095e:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000960:	f7ff ffea 	bl	1a000938 <Chip_Clock_GetBaseClock>
1a000964:	f7ff fed8 	bl	1a000718 <Chip_Clock_GetClockInputHz>
}
1a000968:	bd08      	pop	{r3, pc}
1a00096a:	Address 0x000000001a00096a is out of bounds.


1a00096c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a00096c:	b969      	cbnz	r1, 1a00098a <Chip_Clock_EnableOpts+0x1e>
   uint32_t reg = 1;
1a00096e:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a000970:	b10a      	cbz	r2, 1a000976 <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a000972:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000976:	2b02      	cmp	r3, #2
1a000978:	d009      	beq.n	1a00098e <Chip_Clock_EnableOpts+0x22>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a00097a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00097e:	d209      	bcs.n	1a000994 <Chip_Clock_EnableOpts+0x28>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000980:	3020      	adds	r0, #32
1a000982:	4b07      	ldr	r3, [pc, #28]	; (1a0009a0 <Chip_Clock_EnableOpts+0x34>)
1a000984:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000988:	4770      	bx	lr
       reg |= (1 << 1);
1a00098a:	2103      	movs	r1, #3
1a00098c:	e7f0      	b.n	1a000970 <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a00098e:	f041 0120 	orr.w	r1, r1, #32
1a000992:	e7f2      	b.n	1a00097a <Chip_Clock_EnableOpts+0xe>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000994:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000998:	4b02      	ldr	r3, [pc, #8]	; (1a0009a4 <Chip_Clock_EnableOpts+0x38>)
1a00099a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00099e:	4770      	bx	lr
1a0009a0:	40051000 	.word	0x40051000
1a0009a4:	40052000 	.word	0x40052000

1a0009a8 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0009a8:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a0009aa:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0009ae:	d309      	bcc.n	1a0009c4 <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0009b0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0009b4:	4a0d      	ldr	r2, [pc, #52]	; (1a0009ec <Chip_Clock_GetRate+0x44>)
1a0009b6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a0009ba:	f014 0f01 	tst.w	r4, #1
1a0009be:	d107      	bne.n	1a0009d0 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a0009c0:	2000      	movs	r0, #0
   }

   return rate;
}
1a0009c2:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0009c4:	f100 0320 	add.w	r3, r0, #32
1a0009c8:	4a09      	ldr	r2, [pc, #36]	; (1a0009f0 <Chip_Clock_GetRate+0x48>)
1a0009ca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0009ce:	e7f4      	b.n	1a0009ba <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a0009d0:	f7ff fe3a 	bl	1a000648 <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0009d4:	f7ff ffc3 	bl	1a00095e <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a0009d8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0009dc:	d103      	bne.n	1a0009e6 <Chip_Clock_GetRate+0x3e>
           div = 1;
1a0009de:	2301      	movs	r3, #1
       rate = rate / div;
1a0009e0:	fbb0 f0f3 	udiv	r0, r0, r3
1a0009e4:	bd10      	pop	{r4, pc}
           div = 2;/* No other dividers supported */
1a0009e6:	2302      	movs	r3, #2
1a0009e8:	e7fa      	b.n	1a0009e0 <Chip_Clock_GetRate+0x38>
1a0009ea:	bf00      	nop
1a0009ec:	40052000 	.word	0x40052000
1a0009f0:	40051000 	.word	0x40051000

1a0009f4 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a0009f4:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a0009f6:	4b0f      	ldr	r3, [pc, #60]	; (1a000a34 <fpuInit+0x40>)
1a0009f8:	681b      	ldr	r3, [r3, #0]
1a0009fa:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a0009fc:	4b0e      	ldr	r3, [pc, #56]	; (1a000a38 <fpuInit+0x44>)
1a0009fe:	681b      	ldr	r3, [r3, #0]
1a000a00:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000a02:	9a02      	ldr	r2, [sp, #8]
1a000a04:	4b0d      	ldr	r3, [pc, #52]	; (1a000a3c <fpuInit+0x48>)
1a000a06:	429a      	cmp	r2, r3
1a000a08:	d00c      	beq.n	1a000a24 <fpuInit+0x30>
1a000a0a:	2300      	movs	r3, #0

   if (vfpPresent) {
1a000a0c:	b143      	cbz	r3, 1a000a20 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a000a0e:	4a0c      	ldr	r2, [pc, #48]	; (1a000a40 <fpuInit+0x4c>)
1a000a10:	6813      	ldr	r3, [r2, #0]
1a000a12:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000a14:	9b03      	ldr	r3, [sp, #12]
1a000a16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000a1a:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000a1c:	9b03      	ldr	r3, [sp, #12]
1a000a1e:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000a20:	b004      	add	sp, #16
1a000a22:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000a24:	9a01      	ldr	r2, [sp, #4]
1a000a26:	4b07      	ldr	r3, [pc, #28]	; (1a000a44 <fpuInit+0x50>)
1a000a28:	429a      	cmp	r2, r3
1a000a2a:	d001      	beq.n	1a000a30 <fpuInit+0x3c>
1a000a2c:	2300      	movs	r3, #0
1a000a2e:	e7ed      	b.n	1a000a0c <fpuInit+0x18>
1a000a30:	2301      	movs	r3, #1
1a000a32:	e7eb      	b.n	1a000a0c <fpuInit+0x18>
1a000a34:	e000ef40 	.word	0xe000ef40
1a000a38:	e000ef44 	.word	0xe000ef44
1a000a3c:	10110021 	.word	0x10110021
1a000a40:	e000ed88 	.word	0xe000ed88
1a000a44:	11000011 	.word	0x11000011

1a000a48 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a000a48:	4770      	bx	lr

1a000a4a <Chip_GPIO_SetDir>:
}

/* Set Direction for a GPIO port */
void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
   if (out) {
1a000a4a:	b943      	cbnz	r3, 1a000a5e <Chip_GPIO_SetDir+0x14>
       pGPIO->DIR[portNum] |= bitValue;
   }
   else {
       pGPIO->DIR[portNum] &= ~bitValue;
1a000a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000a50:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000a54:	ea23 0202 	bic.w	r2, r3, r2
1a000a58:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000a5c:	4770      	bx	lr
       pGPIO->DIR[portNum] |= bitValue;
1a000a5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000a62:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000a66:	431a      	orrs	r2, r3
1a000a68:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000a6c:	4770      	bx	lr
1a000a6e:	Address 0x000000001a000a6e is out of bounds.


1a000a70 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000a70:	b570      	push	{r4, r5, r6, lr}
1a000a72:	b092      	sub	sp, #72	; 0x48
1a000a74:	4605      	mov	r5, r0
1a000a76:	460e      	mov	r6, r1
1a000a78:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a000a7a:	f241 537c 	movw	r3, #5500	; 0x157c
1a000a7e:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000a80:	2806      	cmp	r0, #6
1a000a82:	d044      	beq.n	1a000b0e <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000a84:	2300      	movs	r3, #0
1a000a86:	2201      	movs	r2, #1
1a000a88:	4629      	mov	r1, r5
1a000a8a:	2004      	movs	r0, #4
1a000a8c:	f7ff ff28 	bl	1a0008e0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a000a90:	4a4a      	ldr	r2, [pc, #296]	; (1a000bbc <Chip_SetupCoreClock+0x14c>)
1a000a92:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000a94:	f043 0301 	orr.w	r3, r3, #1
1a000a98:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a000a9a:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000a9e:	a909      	add	r1, sp, #36	; 0x24
1a000aa0:	4630      	mov	r0, r6
1a000aa2:	f7ff fe95 	bl	1a0007d0 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a000aa6:	4b46      	ldr	r3, [pc, #280]	; (1a000bc0 <Chip_SetupCoreClock+0x150>)
1a000aa8:	429e      	cmp	r6, r3
1a000aaa:	d938      	bls.n	1a000b1e <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000aae:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ab2:	d001      	beq.n	1a000ab8 <Chip_SetupCoreClock+0x48>
1a000ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000ab6:	b36a      	cbz	r2, 1a000b14 <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a000ab8:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a000abc:	a901      	add	r1, sp, #4
1a000abe:	4840      	ldr	r0, [pc, #256]	; (1a000bc0 <Chip_SetupCoreClock+0x150>)
1a000ac0:	f7ff fe86 	bl	1a0007d0 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000ac4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000ac8:	9b01      	ldr	r3, [sp, #4]
1a000aca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000ace:	9a05      	ldr	r2, [sp, #20]
1a000ad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000ad4:	9a03      	ldr	r2, [sp, #12]
1a000ad6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000ada:	9a04      	ldr	r2, [sp, #16]
1a000adc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000ae0:	4a36      	ldr	r2, [pc, #216]	; (1a000bbc <Chip_SetupCoreClock+0x14c>)
1a000ae2:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000ae4:	4b35      	ldr	r3, [pc, #212]	; (1a000bbc <Chip_SetupCoreClock+0x14c>)
1a000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a000ae8:	f013 0f01 	tst.w	r3, #1
1a000aec:	d0fa      	beq.n	1a000ae4 <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000aee:	2300      	movs	r3, #0
1a000af0:	2201      	movs	r2, #1
1a000af2:	2109      	movs	r1, #9
1a000af4:	2004      	movs	r0, #4
1a000af6:	f7ff fef3 	bl	1a0008e0 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a000afa:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000afc:	1e5a      	subs	r2, r3, #1
1a000afe:	9211      	str	r2, [sp, #68]	; 0x44
1a000b00:	2b00      	cmp	r3, #0
1a000b02:	d1fa      	bne.n	1a000afa <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a000b04:	f241 537c 	movw	r3, #5500	; 0x157c
1a000b08:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
1a000b0a:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000b0c:	e008      	b.n	1a000b20 <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a000b0e:	f7ff fdc1 	bl	1a000694 <Chip_Clock_EnableCrystal>
1a000b12:	e7b7      	b.n	1a000a84 <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a000b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000b18:	9309      	str	r3, [sp, #36]	; 0x24
           direct = 1;
1a000b1a:	2501      	movs	r5, #1
1a000b1c:	e000      	b.n	1a000b20 <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a000b1e:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000b20:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000b26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000b2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000b30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000b32:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000b38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b3c:	4a1f      	ldr	r2, [pc, #124]	; (1a000bbc <Chip_SetupCoreClock+0x14c>)
1a000b3e:	6453      	str	r3, [r2, #68]	; 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000b40:	4b1e      	ldr	r3, [pc, #120]	; (1a000bbc <Chip_SetupCoreClock+0x14c>)
1a000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000b44:	f013 0f01 	tst.w	r3, #1
1a000b48:	d0fa      	beq.n	1a000b40 <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000b4a:	2300      	movs	r3, #0
1a000b4c:	2201      	movs	r2, #1
1a000b4e:	2109      	movs	r1, #9
1a000b50:	2004      	movs	r0, #4
1a000b52:	f7ff fec5 	bl	1a0008e0 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000b56:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000b58:	1e5a      	subs	r2, r3, #1
1a000b5a:	9211      	str	r2, [sp, #68]	; 0x44
1a000b5c:	2b00      	cmp	r3, #0
1a000b5e:	d1fa      	bne.n	1a000b56 <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a000b60:	b1d5      	cbz	r5, 1a000b98 <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a000b62:	f241 537c 	movw	r3, #5500	; 0x157c
1a000b66:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a000b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000b6e:	9309      	str	r3, [sp, #36]	; 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000b70:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000b74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000b78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000b7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000b80:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000b86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b8a:	4a0c      	ldr	r2, [pc, #48]	; (1a000bbc <Chip_SetupCoreClock+0x14c>)
1a000b8c:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a000b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000b90:	1e5a      	subs	r2, r3, #1
1a000b92:	9211      	str	r2, [sp, #68]	; 0x44
1a000b94:	2b00      	cmp	r3, #0
1a000b96:	d1fa      	bne.n	1a000b8e <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a000b98:	b174      	cbz	r4, 1a000bb8 <Chip_SetupCoreClock+0x148>
1a000b9a:	2400      	movs	r4, #0
1a000b9c:	e00a      	b.n	1a000bb4 <Chip_SetupCoreClock+0x144>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000b9e:	4809      	ldr	r0, [pc, #36]	; (1a000bc4 <Chip_SetupCoreClock+0x154>)
1a000ba0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000ba4:	78cb      	ldrb	r3, [r1, #3]
1a000ba6:	788a      	ldrb	r2, [r1, #2]
1a000ba8:	7849      	ldrb	r1, [r1, #1]
1a000baa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000bae:	f7ff fe97 	bl	1a0008e0 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000bb2:	3401      	adds	r4, #1
1a000bb4:	2c11      	cmp	r4, #17
1a000bb6:	d9f2      	bls.n	1a000b9e <Chip_SetupCoreClock+0x12e>
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a000bb8:	b012      	add	sp, #72	; 0x48
1a000bba:	bd70      	pop	{r4, r5, r6, pc}
1a000bbc:	40050000 	.word	0x40050000
1a000bc0:	068e7780 	.word	0x068e7780
1a000bc4:	1a001634 	.word	0x1a001634

1a000bc8 <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000bc8:	2200      	movs	r2, #0
1a000bca:	2a05      	cmp	r2, #5
1a000bcc:	d819      	bhi.n	1a000c02 <Board_LED_Init+0x3a>
{
1a000bce:	b470      	push	{r4, r5, r6}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a000bd0:	490c      	ldr	r1, [pc, #48]	; (1a000c04 <Board_LED_Init+0x3c>)
1a000bd2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000bd6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000bda:	784c      	ldrb	r4, [r1, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a000bdc:	4b0a      	ldr	r3, [pc, #40]	; (1a000c08 <Board_LED_Init+0x40>)
1a000bde:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000be2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000be6:	2001      	movs	r0, #1
1a000be8:	40a0      	lsls	r0, r4
1a000bea:	4301      	orrs	r1, r0
1a000bec:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   pGPIO->B[port][pin] = setting;
1a000bf0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000bf4:	2100      	movs	r1, #0
1a000bf6:	5519      	strb	r1, [r3, r4]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000bf8:	3201      	adds	r2, #1
1a000bfa:	2a05      	cmp	r2, #5
1a000bfc:	d9e8      	bls.n	1a000bd0 <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a000bfe:	bc70      	pop	{r4, r5, r6}
1a000c00:	4770      	bx	lr
1a000c02:	4770      	bx	lr
1a000c04:	1a001684 	.word	0x1a001684
1a000c08:	400f4000 	.word	0x400f4000

1a000c0c <Board_UART_Init>:
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000c0c:	4b03      	ldr	r3, [pc, #12]	; (1a000c1c <Board_UART_Init+0x10>)
1a000c0e:	2212      	movs	r2, #18
1a000c10:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a000c14:	22d1      	movs	r2, #209	; 0xd1
1a000c16:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a000c1a:	4770      	bx	lr
1a000c1c:	40086000 	.word	0x40086000

1a000c20 <Board_Debug_Init>:
{
1a000c20:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a000c22:	4c08      	ldr	r4, [pc, #32]	; (1a000c44 <Board_Debug_Init+0x24>)
1a000c24:	4620      	mov	r0, r4
1a000c26:	f7ff fff1 	bl	1a000c0c <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a000c2a:	4620      	mov	r0, r4
1a000c2c:	f7ff fb94 	bl	1a000358 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a000c30:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000c34:	4620      	mov	r0, r4
1a000c36:	f7ff fbb9 	bl	1a0003ac <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a000c3a:	2303      	movs	r3, #3
1a000c3c:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000c3e:	2301      	movs	r3, #1
1a000c40:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000c42:	bd10      	pop	{r4, pc}
1a000c44:	400c1000 	.word	0x400c1000

1a000c48 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a000c48:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a000c4a:	f7ff ffe9 	bl	1a000c20 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a000c4e:	4806      	ldr	r0, [pc, #24]	; (1a000c68 <Board_Init+0x20>)
1a000c50:	f7ff fefa 	bl	1a000a48 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a000c54:	f7ff ffb8 	bl	1a000bc8 <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a000c58:	4a04      	ldr	r2, [pc, #16]	; (1a000c6c <Board_Init+0x24>)
1a000c5a:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a000c5e:	f043 0304 	orr.w	r3, r3, #4
1a000c62:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a000c66:	bd08      	pop	{r3, pc}
1a000c68:	400f4000 	.word	0x400f4000
1a000c6c:	40043000 	.word	0x40043000

1a000c70 <ResetISR>:
void ResetISR(void) {
1a000c70:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a000c72:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000c74:	4a16      	ldr	r2, [pc, #88]	; (1a000cd0 <ResetISR+0x60>)
1a000c76:	4b17      	ldr	r3, [pc, #92]	; (1a000cd4 <ResetISR+0x64>)
1a000c78:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000c7a:	4a17      	ldr	r2, [pc, #92]	; (1a000cd8 <ResetISR+0x68>)
1a000c7c:	3304      	adds	r3, #4
1a000c7e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c80:	2300      	movs	r3, #0
1a000c82:	e005      	b.n	1a000c90 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000c88:	4a14      	ldr	r2, [pc, #80]	; (1a000cdc <ResetISR+0x6c>)
1a000c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c8e:	3301      	adds	r3, #1
1a000c90:	2b07      	cmp	r3, #7
1a000c92:	d9f7      	bls.n	1a000c84 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a000c94:	b662      	cpsie	i
    SystemInit();
1a000c96:	f000 f829 	bl	1a000cec <SystemInit>
    SectionTableAddr = &__data_section_table;
1a000c9a:	4b11      	ldr	r3, [pc, #68]	; (1a000ce0 <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000c9c:	e007      	b.n	1a000cae <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a000c9e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000ca2:	689a      	ldr	r2, [r3, #8]
1a000ca4:	6859      	ldr	r1, [r3, #4]
1a000ca6:	6818      	ldr	r0, [r3, #0]
1a000ca8:	f7ff fa70 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a000cac:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000cae:	4a0d      	ldr	r2, [pc, #52]	; (1a000ce4 <ResetISR+0x74>)
1a000cb0:	4293      	cmp	r3, r2
1a000cb2:	d3f4      	bcc.n	1a000c9e <ResetISR+0x2e>
1a000cb4:	e006      	b.n	1a000cc4 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a000cb6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000cb8:	6859      	ldr	r1, [r3, #4]
1a000cba:	f854 0b08 	ldr.w	r0, [r4], #8
1a000cbe:	f7ff fa74 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a000cc2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000cc4:	4a08      	ldr	r2, [pc, #32]	; (1a000ce8 <ResetISR+0x78>)
1a000cc6:	4293      	cmp	r3, r2
1a000cc8:	d3f5      	bcc.n	1a000cb6 <ResetISR+0x46>
    main();
1a000cca:	f7ff fb19 	bl	1a000300 <main>
1a000cce:	e7fe      	b.n	1a000cce <ResetISR+0x5e>
1a000cd0:	10df1000 	.word	0x10df1000
1a000cd4:	40053100 	.word	0x40053100
1a000cd8:	01dff7ff 	.word	0x01dff7ff
1a000cdc:	e000e280 	.word	0xe000e280
1a000ce0:	1a000114 	.word	0x1a000114
1a000ce4:	1a000150 	.word	0x1a000150
1a000ce8:	1a000178 	.word	0x1a000178

1a000cec <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000cec:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000cee:	f7ff fe81 	bl	1a0009f4 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a000cf2:	f000 f853 	bl	1a000d9c <Board_SystemInit>
1a000cf6:	bd08      	pop	{r3, pc}

1a000cf8 <Board_SetupMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000cf8:	2300      	movs	r3, #0
1a000cfa:	2b17      	cmp	r3, #23
1a000cfc:	d812      	bhi.n	1a000d24 <Board_SetupMuxing+0x2c>
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a000cfe:	b410      	push	{r4}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000d00:	4a09      	ldr	r2, [pc, #36]	; (1a000d28 <Board_SetupMuxing+0x30>)
1a000d02:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000d06:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000d0a:	784a      	ldrb	r2, [r1, #1]
1a000d0c:	8848      	ldrh	r0, [r1, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000d0e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000d12:	4906      	ldr	r1, [pc, #24]	; (1a000d2c <Board_SetupMuxing+0x34>)
1a000d14:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000d18:	3301      	adds	r3, #1
1a000d1a:	2b17      	cmp	r3, #23
1a000d1c:	d9f0      	bls.n	1a000d00 <Board_SetupMuxing+0x8>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000d22:	4770      	bx	lr
1a000d24:	4770      	bx	lr
1a000d26:	bf00      	nop
1a000d28:	1a00169c 	.word	0x1a00169c
1a000d2c:	40086000 	.word	0x40086000

1a000d30 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a000d30:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000d32:	4a17      	ldr	r2, [pc, #92]	; (1a000d90 <Board_SetupClocking+0x60>)
1a000d34:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000d3c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000d40:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000d44:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000d4c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000d50:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000d54:	2201      	movs	r2, #1
1a000d56:	490f      	ldr	r1, [pc, #60]	; (1a000d94 <Board_SetupClocking+0x64>)
1a000d58:	2006      	movs	r0, #6
1a000d5a:	f7ff fe89 	bl	1a000a70 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000d5e:	2400      	movs	r4, #0
1a000d60:	e00a      	b.n	1a000d78 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000d62:	480d      	ldr	r0, [pc, #52]	; (1a000d98 <Board_SetupClocking+0x68>)
1a000d64:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000d68:	78cb      	ldrb	r3, [r1, #3]
1a000d6a:	788a      	ldrb	r2, [r1, #2]
1a000d6c:	7849      	ldrb	r1, [r1, #1]
1a000d6e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000d72:	f7ff fdb5 	bl	1a0008e0 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000d76:	3401      	adds	r4, #1
1a000d78:	2c02      	cmp	r4, #2
1a000d7a:	d9f2      	bls.n	1a000d62 <Board_SetupClocking+0x32>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000d7c:	4b04      	ldr	r3, [pc, #16]	; (1a000d90 <Board_SetupClocking+0x60>)
1a000d7e:	685a      	ldr	r2, [r3, #4]
1a000d80:	f022 020c 	bic.w	r2, r2, #12
1a000d84:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000d86:	685a      	ldr	r2, [r3, #4]
1a000d88:	f042 0203 	orr.w	r2, r2, #3
1a000d8c:	605a      	str	r2, [r3, #4]
1a000d8e:	bd10      	pop	{r4, pc}
1a000d90:	40043000 	.word	0x40043000
1a000d94:	0c28cb00 	.word	0x0c28cb00
1a000d98:	1a001690 	.word	0x1a001690

1a000d9c <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000d9c:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a000d9e:	f7ff ffab 	bl	1a000cf8 <Board_SetupMuxing>
   Board_SetupClocking();
1a000da2:	f7ff ffc5 	bl	1a000d30 <Board_SetupClocking>
1a000da6:	bd08      	pop	{r3, pc}

1a000da8 <UART2_IRQHandler>:
}

/* 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26) */
void UART2_IRQHandler(void){
1a000da8:	4770      	bx	lr

1a000daa <UART3_IRQHandler>:
}

/* 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27) */
void UART3_IRQHandler(void){
1a000daa:	4770      	bx	lr

1a000dac <sAPI_NullFuncPtr>:
 * param:  void * - Not used
 * return: bool_t - Return always true
 */
bool_t sAPI_NullFuncPtr(void *ptr){
   return 1;
}
1a000dac:	2001      	movs	r0, #1
1a000dae:	4770      	bx	lr

1a000db0 <delay>:

/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay (tick_t time){
1a000db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000db4:	4680      	mov	r8, r0
1a000db6:	4689      	mov	r9, r1
    tick_t curTicks = tickRead();
1a000db8:	f000 f852 	bl	1a000e60 <tickRead>
1a000dbc:	4606      	mov	r6, r0
1a000dbe:	460f      	mov	r7, r1
    while ( (tickRead() - curTicks) < time/tickRateMS );
1a000dc0:	f000 f84e 	bl	1a000e60 <tickRead>
1a000dc4:	1b84      	subs	r4, r0, r6
1a000dc6:	eb61 0507 	sbc.w	r5, r1, r7
1a000dca:	4b06      	ldr	r3, [pc, #24]	; (1a000de4 <delay+0x34>)
1a000dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000dd0:	4640      	mov	r0, r8
1a000dd2:	4649      	mov	r1, r9
1a000dd4:	f000 fa5a 	bl	1a00128c <__aeabi_uldivmod>
1a000dd8:	428d      	cmp	r5, r1
1a000dda:	bf08      	it	eq
1a000ddc:	4284      	cmpeq	r4, r0
1a000dde:	d3ef      	bcc.n	1a000dc0 <delay+0x10>
 }
1a000de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000de4:	10000060 	.word	0x10000060

1a000de8 <tickConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig(tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook ) {
1a000de8:	b508      	push	{r3, lr}

   bool_t ret_val = 1;
   tick_t tickRateHz = 0;

   if( tickHook ){
1a000dea:	b112      	cbz	r2, 1a000df2 <tickConfig+0xa>
1a000dec:	4613      	mov	r3, r2
      tickHookFunction = tickHook;
1a000dee:	4a17      	ldr	r2, [pc, #92]	; (1a000e4c <tickConfig+0x64>)
1a000df0:	6013      	str	r3, [r2, #0]
   }

   if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ){
1a000df2:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a000df6:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a000dfa:	2b00      	cmp	r3, #0
1a000dfc:	bf08      	it	eq
1a000dfe:	2a32      	cmpeq	r2, #50	; 0x32
1a000e00:	d220      	bcs.n	1a000e44 <tickConfig+0x5c>
1a000e02:	4602      	mov	r2, r0
1a000e04:	460b      	mov	r3, r1

		tickRateMS = tickRateMSvalue;
1a000e06:	4912      	ldr	r1, [pc, #72]	; (1a000e50 <tickConfig+0x68>)
1a000e08:	e9c1 2300 	strd	r2, r3, [r1]
      tickRateHz = 1000 => 1000 ticks per second =>  1 ms tick
      tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
      tickRateHz =  100 =>  100 ticks per second => 10 ms tick
      tickRateHz =   20 =>   20 ticks per second => 50 ms tick
      */
      tickRateHz = 1000 / tickRateMSvalue;
1a000e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000e10:	2100      	movs	r1, #0
1a000e12:	f000 fa3b 	bl	1a00128c <__aeabi_uldivmod>

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
1a000e16:	4602      	mov	r2, r0
1a000e18:	460b      	mov	r3, r1
1a000e1a:	490e      	ldr	r1, [pc, #56]	; (1a000e54 <tickConfig+0x6c>)
1a000e1c:	6808      	ldr	r0, [r1, #0]
1a000e1e:	2100      	movs	r1, #0
1a000e20:	f000 fa34 	bl	1a00128c <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a000e24:	3801      	subs	r0, #1
1a000e26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000e2a:	d20d      	bcs.n	1a000e48 <tickConfig+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000e2c:	4b0a      	ldr	r3, [pc, #40]	; (1a000e58 <tickConfig+0x70>)
1a000e2e:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000e30:	21e0      	movs	r1, #224	; 0xe0
1a000e32:	4a0a      	ldr	r2, [pc, #40]	; (1a000e5c <tickConfig+0x74>)
1a000e34:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000e38:	2200      	movs	r2, #0
1a000e3a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000e3c:	2207      	movs	r2, #7
1a000e3e:	601a      	str	r2, [r3, #0]
   bool_t ret_val = 1;
1a000e40:	2001      	movs	r0, #1
1a000e42:	bd08      	pop	{r3, pc}
   }
   else{
      /* Error, tickRateMS variable not in range (1 <= tickRateMS <= 50) */
      ret_val = 0;
1a000e44:	2000      	movs	r0, #0
1a000e46:	bd08      	pop	{r3, pc}
   bool_t ret_val = 1;
1a000e48:	2001      	movs	r0, #1
   }

   return ret_val;
}
1a000e4a:	bd08      	pop	{r3, pc}
1a000e4c:	10000000 	.word	0x10000000
1a000e50:	10000060 	.word	0x10000060
1a000e54:	10000050 	.word	0x10000050
1a000e58:	e000e010 	.word	0xe000e010
1a000e5c:	e000ed00 	.word	0xe000ed00

1a000e60 <tickRead>:


/* Read Tick Counter */
tick_t tickRead( void ) {
   return tickCounter;
}
1a000e60:	4b01      	ldr	r3, [pc, #4]	; (1a000e68 <tickRead+0x8>)
1a000e62:	e9d3 0100 	ldrd	r0, r1, [r3]
1a000e66:	4770      	bx	lr
1a000e68:	10000058 	.word	0x10000058

1a000e6c <SysTick_Handler>:
/*==================[ISR external functions definition]======================*/

//__attribute__ ((section(".after_vectors")))

/* SysTick Timer ISR Handler */
void SysTick_Handler(void) {
1a000e6c:	b508      	push	{r3, lr}
   tickCounter++;
1a000e6e:	4906      	ldr	r1, [pc, #24]	; (1a000e88 <SysTick_Handler+0x1c>)
1a000e70:	e9d1 2300 	ldrd	r2, r3, [r1]
1a000e74:	3201      	adds	r2, #1
1a000e76:	f143 0300 	adc.w	r3, r3, #0
1a000e7a:	e9c1 2300 	strd	r2, r3, [r1]

	/* Execute Tick Hook function */
	(* tickHookFunction )( 0 );
1a000e7e:	4b03      	ldr	r3, [pc, #12]	; (1a000e8c <SysTick_Handler+0x20>)
1a000e80:	681b      	ldr	r3, [r3, #0]
1a000e82:	2000      	movs	r0, #0
1a000e84:	4798      	blx	r3
1a000e86:	bd08      	pop	{r3, pc}
1a000e88:	10000058 	.word	0x10000058
1a000e8c:	10000000 	.word	0x10000000

1a000e90 <errorOcurred>:
/*==================[internal functions definition]==========================*/

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred(void){
1a000e90:	e7fe      	b.n	1a000e90 <errorOcurred>

1a000e92 <doNothing>:
   while(1);
}

static void doNothing(void){
1a000e92:	4770      	bx	lr

1a000e94 <TIMER0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void){
1a000e94:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000e96:	2400      	movs	r4, #0
1a000e98:	e001      	b.n	1a000e9e <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000e9a:	3401      	adds	r4, #1
1a000e9c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000e9e:	2c03      	cmp	r4, #3
1a000ea0:	d812      	bhi.n	1a000ec8 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ){
1a000ea2:	b265      	sxtb	r5, r4
 * @note   Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000ea4:	4b09      	ldr	r3, [pc, #36]	; (1a000ecc <TIMER0_IRQHandler+0x38>)
1a000ea6:	681a      	ldr	r2, [r3, #0]
1a000ea8:	f004 010f 	and.w	r1, r4, #15
1a000eac:	2301      	movs	r3, #1
1a000eae:	408b      	lsls	r3, r1
1a000eb0:	421a      	tst	r2, r3
1a000eb2:	d0f2      	beq.n	1a000e9a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a000eb4:	4b06      	ldr	r3, [pc, #24]	; (1a000ed0 <TIMER0_IRQHandler+0x3c>)
1a000eb6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000eba:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a000ebc:	2301      	movs	r3, #1
1a000ebe:	fa03 f505 	lsl.w	r5, r3, r5
1a000ec2:	4b02      	ldr	r3, [pc, #8]	; (1a000ecc <TIMER0_IRQHandler+0x38>)
1a000ec4:	601d      	str	r5, [r3, #0]
1a000ec6:	e7e8      	b.n	1a000e9a <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a000ec8:	bd38      	pop	{r3, r4, r5, pc}
1a000eca:	bf00      	nop
1a000ecc:	40084000 	.word	0x40084000
1a000ed0:	10000004 	.word	0x10000004

1a000ed4 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void ){
1a000ed4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000ed6:	2400      	movs	r4, #0
1a000ed8:	e001      	b.n	1a000ede <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000eda:	3401      	adds	r4, #1
1a000edc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000ede:	2c03      	cmp	r4, #3
1a000ee0:	d813      	bhi.n	1a000f0a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ){
1a000ee2:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000ee4:	4b09      	ldr	r3, [pc, #36]	; (1a000f0c <TIMER1_IRQHandler+0x38>)
1a000ee6:	681a      	ldr	r2, [r3, #0]
1a000ee8:	f004 010f 	and.w	r1, r4, #15
1a000eec:	2301      	movs	r3, #1
1a000eee:	408b      	lsls	r3, r1
1a000ef0:	421a      	tst	r2, r3
1a000ef2:	d0f2      	beq.n	1a000eda <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a000ef4:	1d23      	adds	r3, r4, #4
1a000ef6:	4a06      	ldr	r2, [pc, #24]	; (1a000f10 <TIMER1_IRQHandler+0x3c>)
1a000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000efc:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a000efe:	2301      	movs	r3, #1
1a000f00:	fa03 f505 	lsl.w	r5, r3, r5
1a000f04:	4b01      	ldr	r3, [pc, #4]	; (1a000f0c <TIMER1_IRQHandler+0x38>)
1a000f06:	601d      	str	r5, [r3, #0]
1a000f08:	e7e7      	b.n	1a000eda <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a000f0a:	bd38      	pop	{r3, r4, r5, pc}
1a000f0c:	40085000 	.word	0x40085000
1a000f10:	10000004 	.word	0x10000004

1a000f14 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void ){
1a000f14:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000f16:	2400      	movs	r4, #0
1a000f18:	e001      	b.n	1a000f1e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000f1a:	3401      	adds	r4, #1
1a000f1c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000f1e:	2c03      	cmp	r4, #3
1a000f20:	d814      	bhi.n	1a000f4c <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ){
1a000f22:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000f24:	4b0a      	ldr	r3, [pc, #40]	; (1a000f50 <TIMER2_IRQHandler+0x3c>)
1a000f26:	681a      	ldr	r2, [r3, #0]
1a000f28:	f004 010f 	and.w	r1, r4, #15
1a000f2c:	2301      	movs	r3, #1
1a000f2e:	408b      	lsls	r3, r1
1a000f30:	421a      	tst	r2, r3
1a000f32:	d0f2      	beq.n	1a000f1a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a000f34:	f104 0308 	add.w	r3, r4, #8
1a000f38:	4a06      	ldr	r2, [pc, #24]	; (1a000f54 <TIMER2_IRQHandler+0x40>)
1a000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000f3e:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a000f40:	2301      	movs	r3, #1
1a000f42:	fa03 f505 	lsl.w	r5, r3, r5
1a000f46:	4b02      	ldr	r3, [pc, #8]	; (1a000f50 <TIMER2_IRQHandler+0x3c>)
1a000f48:	601d      	str	r5, [r3, #0]
1a000f4a:	e7e6      	b.n	1a000f1a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a000f4c:	bd38      	pop	{r3, r4, r5, pc}
1a000f4e:	bf00      	nop
1a000f50:	400c3000 	.word	0x400c3000
1a000f54:	10000004 	.word	0x10000004

1a000f58 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void ){
1a000f58:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000f5a:	2400      	movs	r4, #0
1a000f5c:	e001      	b.n	1a000f62 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000f5e:	3401      	adds	r4, #1
1a000f60:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000f62:	2c03      	cmp	r4, #3
1a000f64:	d814      	bhi.n	1a000f90 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)){
1a000f66:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000f68:	4b0a      	ldr	r3, [pc, #40]	; (1a000f94 <TIMER3_IRQHandler+0x3c>)
1a000f6a:	681a      	ldr	r2, [r3, #0]
1a000f6c:	f004 010f 	and.w	r1, r4, #15
1a000f70:	2301      	movs	r3, #1
1a000f72:	408b      	lsls	r3, r1
1a000f74:	421a      	tst	r2, r3
1a000f76:	d0f2      	beq.n	1a000f5e <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a000f78:	f104 030c 	add.w	r3, r4, #12
1a000f7c:	4a06      	ldr	r2, [pc, #24]	; (1a000f98 <TIMER3_IRQHandler+0x40>)
1a000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000f82:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a000f84:	2301      	movs	r3, #1
1a000f86:	fa03 f505 	lsl.w	r5, r3, r5
1a000f8a:	4b02      	ldr	r3, [pc, #8]	; (1a000f94 <TIMER3_IRQHandler+0x3c>)
1a000f8c:	601d      	str	r5, [r3, #0]
1a000f8e:	e7e6      	b.n	1a000f5e <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a000f90:	bd38      	pop	{r3, r4, r5, pc}
1a000f92:	bf00      	nop
1a000f94:	400c4000 	.word	0x400c4000
1a000f98:	10000004 	.word	0x10000004

1a000f9c <boardConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardConfig(void) {
1a000f9c:	b508      	push	{r3, lr}

   /* Read clock settings and update SystemCoreClock variable */
   SystemCoreClockUpdate();
1a000f9e:	f7ff fa79 	bl	1a000494 <SystemCoreClockUpdate>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a000fa2:	f7ff fe51 	bl	1a000c48 <Board_Init>

   /* Inicializar el conteo de Ticks con resolución de 1ms, sin tickHook */
   tickConfig( 1, 0 );
1a000fa6:	2200      	movs	r2, #0
1a000fa8:	2001      	movs	r0, #1
1a000faa:	2100      	movs	r1, #0
1a000fac:	f7ff ff1c 	bl	1a000de8 <tickConfig>

   /* Inicializar GPIOs */
   gpioConfig( 0, GPIO_ENABLE );
1a000fb0:	2105      	movs	r1, #5
1a000fb2:	2000      	movs	r0, #0
1a000fb4:	f000 f884 	bl	1a0010c0 <gpioConfig>

   /* Configuración de pines de entrada para Teclas de la EDU-CIAA-NXP */
   gpioConfig( TEC1, GPIO_INPUT );
1a000fb8:	2100      	movs	r1, #0
1a000fba:	2024      	movs	r0, #36	; 0x24
1a000fbc:	f000 f880 	bl	1a0010c0 <gpioConfig>
   gpioConfig( TEC2, GPIO_INPUT );
1a000fc0:	2100      	movs	r1, #0
1a000fc2:	2025      	movs	r0, #37	; 0x25
1a000fc4:	f000 f87c 	bl	1a0010c0 <gpioConfig>
   gpioConfig( TEC3, GPIO_INPUT );
1a000fc8:	2100      	movs	r1, #0
1a000fca:	2026      	movs	r0, #38	; 0x26
1a000fcc:	f000 f878 	bl	1a0010c0 <gpioConfig>
   gpioConfig( TEC4, GPIO_INPUT );
1a000fd0:	2100      	movs	r1, #0
1a000fd2:	2027      	movs	r0, #39	; 0x27
1a000fd4:	f000 f874 	bl	1a0010c0 <gpioConfig>

   /* Configuración de pines de salida para Leds de la EDU-CIAA-NXP */
   gpioConfig( LEDR, GPIO_OUTPUT );
1a000fd8:	2101      	movs	r1, #1
1a000fda:	202b      	movs	r0, #43	; 0x2b
1a000fdc:	f000 f870 	bl	1a0010c0 <gpioConfig>
   gpioConfig( LEDG, GPIO_OUTPUT );
1a000fe0:	2101      	movs	r1, #1
1a000fe2:	202c      	movs	r0, #44	; 0x2c
1a000fe4:	f000 f86c 	bl	1a0010c0 <gpioConfig>
   gpioConfig( LEDB, GPIO_OUTPUT );
1a000fe8:	2101      	movs	r1, #1
1a000fea:	202d      	movs	r0, #45	; 0x2d
1a000fec:	f000 f868 	bl	1a0010c0 <gpioConfig>
   gpioConfig( LED1, GPIO_OUTPUT );
1a000ff0:	2101      	movs	r1, #1
1a000ff2:	2028      	movs	r0, #40	; 0x28
1a000ff4:	f000 f864 	bl	1a0010c0 <gpioConfig>
   gpioConfig( LED2, GPIO_OUTPUT );
1a000ff8:	2101      	movs	r1, #1
1a000ffa:	2029      	movs	r0, #41	; 0x29
1a000ffc:	f000 f860 	bl	1a0010c0 <gpioConfig>
   gpioConfig( LED3, GPIO_OUTPUT );
1a001000:	2101      	movs	r1, #1
1a001002:	202a      	movs	r0, #42	; 0x2a
1a001004:	f000 f85c 	bl	1a0010c0 <gpioConfig>


   /* Configuración de pines de entrada de la CIAA-NXP */
   gpioConfig( DI0, GPIO_INPUT );
1a001008:	2100      	movs	r1, #0
1a00100a:	202e      	movs	r0, #46	; 0x2e
1a00100c:	f000 f858 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DI1, GPIO_INPUT );
1a001010:	2100      	movs	r1, #0
1a001012:	202f      	movs	r0, #47	; 0x2f
1a001014:	f000 f854 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DI2, GPIO_INPUT );
1a001018:	2100      	movs	r1, #0
1a00101a:	2030      	movs	r0, #48	; 0x30
1a00101c:	f000 f850 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DI3, GPIO_INPUT );
1a001020:	2100      	movs	r1, #0
1a001022:	2031      	movs	r0, #49	; 0x31
1a001024:	f000 f84c 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DI4, GPIO_INPUT );
1a001028:	2100      	movs	r1, #0
1a00102a:	2032      	movs	r0, #50	; 0x32
1a00102c:	f000 f848 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DI5, GPIO_INPUT );
1a001030:	2100      	movs	r1, #0
1a001032:	2033      	movs	r0, #51	; 0x33
1a001034:	f000 f844 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DI6, GPIO_INPUT );
1a001038:	2100      	movs	r1, #0
1a00103a:	2034      	movs	r0, #52	; 0x34
1a00103c:	f000 f840 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DI7, GPIO_INPUT );
1a001040:	2100      	movs	r1, #0
1a001042:	2035      	movs	r0, #53	; 0x35
1a001044:	f000 f83c 	bl	1a0010c0 <gpioConfig>

   /* Configuración de pines de salida de la CIAA-NXP */
   gpioConfig( DO0, GPIO_OUTPUT );
1a001048:	2101      	movs	r1, #1
1a00104a:	2036      	movs	r0, #54	; 0x36
1a00104c:	f000 f838 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DO1, GPIO_OUTPUT );
1a001050:	2101      	movs	r1, #1
1a001052:	2037      	movs	r0, #55	; 0x37
1a001054:	f000 f834 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DO2, GPIO_OUTPUT );
1a001058:	2101      	movs	r1, #1
1a00105a:	2038      	movs	r0, #56	; 0x38
1a00105c:	f000 f830 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DO3, GPIO_OUTPUT );
1a001060:	2101      	movs	r1, #1
1a001062:	2039      	movs	r0, #57	; 0x39
1a001064:	f000 f82c 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DO4, GPIO_OUTPUT );
1a001068:	2101      	movs	r1, #1
1a00106a:	203a      	movs	r0, #58	; 0x3a
1a00106c:	f000 f828 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DO5, GPIO_OUTPUT );
1a001070:	2101      	movs	r1, #1
1a001072:	203b      	movs	r0, #59	; 0x3b
1a001074:	f000 f824 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DO6, GPIO_OUTPUT );
1a001078:	2101      	movs	r1, #1
1a00107a:	203c      	movs	r0, #60	; 0x3c
1a00107c:	f000 f820 	bl	1a0010c0 <gpioConfig>
   gpioConfig( DO7, GPIO_OUTPUT );
1a001080:	2101      	movs	r1, #1
1a001082:	203d      	movs	r0, #61	; 0x3d
1a001084:	f000 f81c 	bl	1a0010c0 <gpioConfig>
1a001088:	bd08      	pop	{r3, pc}
1a00108a:	Address 0x000000001a00108a is out of bounds.


1a00108c <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( gpioMap_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a00108c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a00108e:	4d0b      	ldr	r5, [pc, #44]	; (1a0010bc <gpioObtainPinConfig+0x30>)
1a001090:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001094:	182c      	adds	r4, r5, r0
1a001096:	5628      	ldrsb	r0, [r5, r0]
1a001098:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a00109a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00109e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a0010a0:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0010a4:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a0010a6:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0010aa:	9b02      	ldr	r3, [sp, #8]
1a0010ac:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a0010ae:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0010b2:	9b03      	ldr	r3, [sp, #12]
1a0010b4:	701a      	strb	r2, [r3, #0]
}
1a0010b6:	bc30      	pop	{r4, r5}
1a0010b8:	4770      	bx	lr
1a0010ba:	bf00      	nop
1a0010bc:	1a0016fc 	.word	0x1a0016fc

1a0010c0 <gpioConfig>:

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){
1a0010c0:	b530      	push	{r4, r5, lr}
1a0010c2:	b085      	sub	sp, #20
1a0010c4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0010c6:	2300      	movs	r3, #0
1a0010c8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0010cc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0010d0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0010d4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0010d8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a0010dc:	f10d 030b 	add.w	r3, sp, #11
1a0010e0:	9301      	str	r3, [sp, #4]
1a0010e2:	ab03      	add	r3, sp, #12
1a0010e4:	9300      	str	r3, [sp, #0]
1a0010e6:	f10d 030d 	add.w	r3, sp, #13
1a0010ea:	f10d 020e 	add.w	r2, sp, #14
1a0010ee:	f10d 010f 	add.w	r1, sp, #15
1a0010f2:	f7ff ffcb 	bl	1a00108c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   switch(config){
1a0010f6:	2c05      	cmp	r4, #5
1a0010f8:	f200 8096 	bhi.w	1a001228 <gpioConfig+0x168>
1a0010fc:	e8df f004 	tbb	[pc, r4]
1a001100:	3d237109 	.word	0x3d237109
1a001104:	0357      	.short	0x0357

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
1a001106:	4849      	ldr	r0, [pc, #292]	; (1a00122c <gpioConfig+0x16c>)
1a001108:	f7ff fc9e 	bl	1a000a48 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00110c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00110e:	b005      	add	sp, #20
1a001110:	bd30      	pop	{r4, r5, pc}
         Chip_SCU_PinMux(
1a001112:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001116:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00111a:	f89d 200d 	ldrb.w	r2, [sp, #13]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00111e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001122:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001126:	4942      	ldr	r1, [pc, #264]	; (1a001230 <gpioConfig+0x170>)
1a001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00112c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001130:	2401      	movs	r4, #1
1a001132:	2300      	movs	r3, #0
1a001134:	fa04 f202 	lsl.w	r2, r4, r2
1a001138:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a00113c:	483b      	ldr	r0, [pc, #236]	; (1a00122c <gpioConfig+0x16c>)
1a00113e:	f7ff fc84 	bl	1a000a4a <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a001142:	4620      	mov	r0, r4
      break;
1a001144:	e7e3      	b.n	1a00110e <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a001146:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00114a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00114e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001152:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001156:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00115a:	4935      	ldr	r1, [pc, #212]	; (1a001230 <gpioConfig+0x170>)
1a00115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001160:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001164:	2401      	movs	r4, #1
1a001166:	2300      	movs	r3, #0
1a001168:	fa04 f202 	lsl.w	r2, r4, r2
1a00116c:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001170:	482e      	ldr	r0, [pc, #184]	; (1a00122c <gpioConfig+0x16c>)
1a001172:	f7ff fc6a 	bl	1a000a4a <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a001176:	4620      	mov	r0, r4
      break;
1a001178:	e7c9      	b.n	1a00110e <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a00117a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00117e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001182:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001186:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00118a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00118e:	4928      	ldr	r1, [pc, #160]	; (1a001230 <gpioConfig+0x170>)
1a001190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001194:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001198:	2401      	movs	r4, #1
1a00119a:	2300      	movs	r3, #0
1a00119c:	fa04 f202 	lsl.w	r2, r4, r2
1a0011a0:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0011a4:	4821      	ldr	r0, [pc, #132]	; (1a00122c <gpioConfig+0x16c>)
1a0011a6:	f7ff fc50 	bl	1a000a4a <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a0011aa:	4620      	mov	r0, r4
      break;
1a0011ac:	e7af      	b.n	1a00110e <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a0011ae:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0011b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0011b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0011ba:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0011be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0011c2:	491b      	ldr	r1, [pc, #108]	; (1a001230 <gpioConfig+0x170>)
1a0011c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0011c8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0011cc:	2401      	movs	r4, #1
1a0011ce:	2300      	movs	r3, #0
1a0011d0:	fa04 f202 	lsl.w	r2, r4, r2
1a0011d4:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0011d8:	4814      	ldr	r0, [pc, #80]	; (1a00122c <gpioConfig+0x16c>)
1a0011da:	f7ff fc36 	bl	1a000a4a <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a0011de:	4620      	mov	r0, r4
      break;
1a0011e0:	e795      	b.n	1a00110e <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a0011e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0011e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0011ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0011ee:	f042 0290 	orr.w	r2, r2, #144	; 0x90
1a0011f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0011f6:	490e      	ldr	r1, [pc, #56]	; (1a001230 <gpioConfig+0x170>)
1a0011f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0011fc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001200:	2401      	movs	r4, #1
1a001202:	4d0a      	ldr	r5, [pc, #40]	; (1a00122c <gpioConfig+0x16c>)
1a001204:	4623      	mov	r3, r4
1a001206:	fa04 f202 	lsl.w	r2, r4, r2
1a00120a:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a00120e:	4628      	mov	r0, r5
1a001210:	f7ff fc1b 	bl	1a000a4a <Chip_GPIO_SetDir>
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001214:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a001218:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a00121c:	eb05 1542 	add.w	r5, r5, r2, lsl #5
1a001220:	2200      	movs	r2, #0
1a001222:	54ea      	strb	r2, [r5, r3]
   bool_t ret_val     = 1;
1a001224:	4620      	mov	r0, r4
1a001226:	e772      	b.n	1a00110e <gpioConfig+0x4e>
         ret_val = 0;
1a001228:	2000      	movs	r0, #0
1a00122a:	e770      	b.n	1a00110e <gpioConfig+0x4e>
1a00122c:	400f4000 	.word	0x400f4000
1a001230:	40086000 	.word	0x40086000

1a001234 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value ){
1a001234:	b510      	push	{r4, lr}
1a001236:	b084      	sub	sp, #16
1a001238:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00123a:	2300      	movs	r3, #0
1a00123c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001240:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001244:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001248:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00124c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001250:	f10d 030b 	add.w	r3, sp, #11
1a001254:	9301      	str	r3, [sp, #4]
1a001256:	ab03      	add	r3, sp, #12
1a001258:	9300      	str	r3, [sp, #0]
1a00125a:	f10d 030d 	add.w	r3, sp, #13
1a00125e:	f10d 020e 	add.w	r2, sp, #14
1a001262:	f10d 010f 	add.w	r1, sp, #15
1a001266:	f7ff ff11 	bl	1a00108c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00126a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00126e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001272:	3400      	adds	r4, #0
1a001274:	bf18      	it	ne
1a001276:	2401      	movne	r4, #1
1a001278:	015b      	lsls	r3, r3, #5
1a00127a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00127e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001282:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a001284:	2001      	movs	r0, #1
1a001286:	b004      	add	sp, #16
1a001288:	bd10      	pop	{r4, pc}
1a00128a:	Address 0x000000001a00128a is out of bounds.


1a00128c <__aeabi_uldivmod>:
1a00128c:	b953      	cbnz	r3, 1a0012a4 <__aeabi_uldivmod+0x18>
1a00128e:	b94a      	cbnz	r2, 1a0012a4 <__aeabi_uldivmod+0x18>
1a001290:	2900      	cmp	r1, #0
1a001292:	bf08      	it	eq
1a001294:	2800      	cmpeq	r0, #0
1a001296:	bf1c      	itt	ne
1a001298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00129c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0012a0:	f000 b97a 	b.w	1a001598 <__aeabi_idiv0>
1a0012a4:	f1ad 0c08 	sub.w	ip, sp, #8
1a0012a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0012ac:	f000 f806 	bl	1a0012bc <__udivmoddi4>
1a0012b0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0012b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0012b8:	b004      	add	sp, #16
1a0012ba:	4770      	bx	lr

1a0012bc <__udivmoddi4>:
1a0012bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0012c0:	468c      	mov	ip, r1
1a0012c2:	460d      	mov	r5, r1
1a0012c4:	4604      	mov	r4, r0
1a0012c6:	9e08      	ldr	r6, [sp, #32]
1a0012c8:	2b00      	cmp	r3, #0
1a0012ca:	d151      	bne.n	1a001370 <__udivmoddi4+0xb4>
1a0012cc:	428a      	cmp	r2, r1
1a0012ce:	4617      	mov	r7, r2
1a0012d0:	d96d      	bls.n	1a0013ae <__udivmoddi4+0xf2>
1a0012d2:	fab2 fe82 	clz	lr, r2
1a0012d6:	f1be 0f00 	cmp.w	lr, #0
1a0012da:	d00b      	beq.n	1a0012f4 <__udivmoddi4+0x38>
1a0012dc:	f1ce 0c20 	rsb	ip, lr, #32
1a0012e0:	fa01 f50e 	lsl.w	r5, r1, lr
1a0012e4:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0012e8:	fa02 f70e 	lsl.w	r7, r2, lr
1a0012ec:	ea4c 0c05 	orr.w	ip, ip, r5
1a0012f0:	fa00 f40e 	lsl.w	r4, r0, lr
1a0012f4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a0012f8:	0c25      	lsrs	r5, r4, #16
1a0012fa:	fbbc f8fa 	udiv	r8, ip, sl
1a0012fe:	fa1f f987 	uxth.w	r9, r7
1a001302:	fb0a cc18 	mls	ip, sl, r8, ip
1a001306:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a00130a:	fb08 f309 	mul.w	r3, r8, r9
1a00130e:	42ab      	cmp	r3, r5
1a001310:	d90a      	bls.n	1a001328 <__udivmoddi4+0x6c>
1a001312:	19ed      	adds	r5, r5, r7
1a001314:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a001318:	f080 8123 	bcs.w	1a001562 <__udivmoddi4+0x2a6>
1a00131c:	42ab      	cmp	r3, r5
1a00131e:	f240 8120 	bls.w	1a001562 <__udivmoddi4+0x2a6>
1a001322:	f1a8 0802 	sub.w	r8, r8, #2
1a001326:	443d      	add	r5, r7
1a001328:	1aed      	subs	r5, r5, r3
1a00132a:	b2a4      	uxth	r4, r4
1a00132c:	fbb5 f0fa 	udiv	r0, r5, sl
1a001330:	fb0a 5510 	mls	r5, sl, r0, r5
1a001334:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a001338:	fb00 f909 	mul.w	r9, r0, r9
1a00133c:	45a1      	cmp	r9, r4
1a00133e:	d909      	bls.n	1a001354 <__udivmoddi4+0x98>
1a001340:	19e4      	adds	r4, r4, r7
1a001342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001346:	f080 810a 	bcs.w	1a00155e <__udivmoddi4+0x2a2>
1a00134a:	45a1      	cmp	r9, r4
1a00134c:	f240 8107 	bls.w	1a00155e <__udivmoddi4+0x2a2>
1a001350:	3802      	subs	r0, #2
1a001352:	443c      	add	r4, r7
1a001354:	eba4 0409 	sub.w	r4, r4, r9
1a001358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a00135c:	2100      	movs	r1, #0
1a00135e:	2e00      	cmp	r6, #0
1a001360:	d061      	beq.n	1a001426 <__udivmoddi4+0x16a>
1a001362:	fa24 f40e 	lsr.w	r4, r4, lr
1a001366:	2300      	movs	r3, #0
1a001368:	6034      	str	r4, [r6, #0]
1a00136a:	6073      	str	r3, [r6, #4]
1a00136c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001370:	428b      	cmp	r3, r1
1a001372:	d907      	bls.n	1a001384 <__udivmoddi4+0xc8>
1a001374:	2e00      	cmp	r6, #0
1a001376:	d054      	beq.n	1a001422 <__udivmoddi4+0x166>
1a001378:	2100      	movs	r1, #0
1a00137a:	e886 0021 	stmia.w	r6, {r0, r5}
1a00137e:	4608      	mov	r0, r1
1a001380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001384:	fab3 f183 	clz	r1, r3
1a001388:	2900      	cmp	r1, #0
1a00138a:	f040 808e 	bne.w	1a0014aa <__udivmoddi4+0x1ee>
1a00138e:	42ab      	cmp	r3, r5
1a001390:	d302      	bcc.n	1a001398 <__udivmoddi4+0xdc>
1a001392:	4282      	cmp	r2, r0
1a001394:	f200 80fa 	bhi.w	1a00158c <__udivmoddi4+0x2d0>
1a001398:	1a84      	subs	r4, r0, r2
1a00139a:	eb65 0503 	sbc.w	r5, r5, r3
1a00139e:	2001      	movs	r0, #1
1a0013a0:	46ac      	mov	ip, r5
1a0013a2:	2e00      	cmp	r6, #0
1a0013a4:	d03f      	beq.n	1a001426 <__udivmoddi4+0x16a>
1a0013a6:	e886 1010 	stmia.w	r6, {r4, ip}
1a0013aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0013ae:	b912      	cbnz	r2, 1a0013b6 <__udivmoddi4+0xfa>
1a0013b0:	2701      	movs	r7, #1
1a0013b2:	fbb7 f7f2 	udiv	r7, r7, r2
1a0013b6:	fab7 fe87 	clz	lr, r7
1a0013ba:	f1be 0f00 	cmp.w	lr, #0
1a0013be:	d134      	bne.n	1a00142a <__udivmoddi4+0x16e>
1a0013c0:	1beb      	subs	r3, r5, r7
1a0013c2:	0c3a      	lsrs	r2, r7, #16
1a0013c4:	fa1f fc87 	uxth.w	ip, r7
1a0013c8:	2101      	movs	r1, #1
1a0013ca:	fbb3 f8f2 	udiv	r8, r3, r2
1a0013ce:	0c25      	lsrs	r5, r4, #16
1a0013d0:	fb02 3318 	mls	r3, r2, r8, r3
1a0013d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a0013d8:	fb0c f308 	mul.w	r3, ip, r8
1a0013dc:	42ab      	cmp	r3, r5
1a0013de:	d907      	bls.n	1a0013f0 <__udivmoddi4+0x134>
1a0013e0:	19ed      	adds	r5, r5, r7
1a0013e2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a0013e6:	d202      	bcs.n	1a0013ee <__udivmoddi4+0x132>
1a0013e8:	42ab      	cmp	r3, r5
1a0013ea:	f200 80d1 	bhi.w	1a001590 <__udivmoddi4+0x2d4>
1a0013ee:	4680      	mov	r8, r0
1a0013f0:	1aed      	subs	r5, r5, r3
1a0013f2:	b2a3      	uxth	r3, r4
1a0013f4:	fbb5 f0f2 	udiv	r0, r5, r2
1a0013f8:	fb02 5510 	mls	r5, r2, r0, r5
1a0013fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a001400:	fb0c fc00 	mul.w	ip, ip, r0
1a001404:	45a4      	cmp	ip, r4
1a001406:	d907      	bls.n	1a001418 <__udivmoddi4+0x15c>
1a001408:	19e4      	adds	r4, r4, r7
1a00140a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00140e:	d202      	bcs.n	1a001416 <__udivmoddi4+0x15a>
1a001410:	45a4      	cmp	ip, r4
1a001412:	f200 80b8 	bhi.w	1a001586 <__udivmoddi4+0x2ca>
1a001416:	4618      	mov	r0, r3
1a001418:	eba4 040c 	sub.w	r4, r4, ip
1a00141c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a001420:	e79d      	b.n	1a00135e <__udivmoddi4+0xa2>
1a001422:	4631      	mov	r1, r6
1a001424:	4630      	mov	r0, r6
1a001426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00142a:	f1ce 0420 	rsb	r4, lr, #32
1a00142e:	fa05 f30e 	lsl.w	r3, r5, lr
1a001432:	fa07 f70e 	lsl.w	r7, r7, lr
1a001436:	fa20 f804 	lsr.w	r8, r0, r4
1a00143a:	0c3a      	lsrs	r2, r7, #16
1a00143c:	fa25 f404 	lsr.w	r4, r5, r4
1a001440:	ea48 0803 	orr.w	r8, r8, r3
1a001444:	fbb4 f1f2 	udiv	r1, r4, r2
1a001448:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a00144c:	fb02 4411 	mls	r4, r2, r1, r4
1a001450:	fa1f fc87 	uxth.w	ip, r7
1a001454:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a001458:	fb01 f30c 	mul.w	r3, r1, ip
1a00145c:	42ab      	cmp	r3, r5
1a00145e:	fa00 f40e 	lsl.w	r4, r0, lr
1a001462:	d909      	bls.n	1a001478 <__udivmoddi4+0x1bc>
1a001464:	19ed      	adds	r5, r5, r7
1a001466:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
1a00146a:	f080 808a 	bcs.w	1a001582 <__udivmoddi4+0x2c6>
1a00146e:	42ab      	cmp	r3, r5
1a001470:	f240 8087 	bls.w	1a001582 <__udivmoddi4+0x2c6>
1a001474:	3902      	subs	r1, #2
1a001476:	443d      	add	r5, r7
1a001478:	1aeb      	subs	r3, r5, r3
1a00147a:	fa1f f588 	uxth.w	r5, r8
1a00147e:	fbb3 f0f2 	udiv	r0, r3, r2
1a001482:	fb02 3310 	mls	r3, r2, r0, r3
1a001486:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a00148a:	fb00 f30c 	mul.w	r3, r0, ip
1a00148e:	42ab      	cmp	r3, r5
1a001490:	d907      	bls.n	1a0014a2 <__udivmoddi4+0x1e6>
1a001492:	19ed      	adds	r5, r5, r7
1a001494:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
1a001498:	d26f      	bcs.n	1a00157a <__udivmoddi4+0x2be>
1a00149a:	42ab      	cmp	r3, r5
1a00149c:	d96d      	bls.n	1a00157a <__udivmoddi4+0x2be>
1a00149e:	3802      	subs	r0, #2
1a0014a0:	443d      	add	r5, r7
1a0014a2:	1aeb      	subs	r3, r5, r3
1a0014a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a0014a8:	e78f      	b.n	1a0013ca <__udivmoddi4+0x10e>
1a0014aa:	f1c1 0720 	rsb	r7, r1, #32
1a0014ae:	fa22 f807 	lsr.w	r8, r2, r7
1a0014b2:	408b      	lsls	r3, r1
1a0014b4:	fa05 f401 	lsl.w	r4, r5, r1
1a0014b8:	ea48 0303 	orr.w	r3, r8, r3
1a0014bc:	fa20 fe07 	lsr.w	lr, r0, r7
1a0014c0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a0014c4:	40fd      	lsrs	r5, r7
1a0014c6:	ea4e 0e04 	orr.w	lr, lr, r4
1a0014ca:	fbb5 f9fc 	udiv	r9, r5, ip
1a0014ce:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a0014d2:	fb0c 5519 	mls	r5, ip, r9, r5
1a0014d6:	fa1f f883 	uxth.w	r8, r3
1a0014da:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a0014de:	fb09 f408 	mul.w	r4, r9, r8
1a0014e2:	42ac      	cmp	r4, r5
1a0014e4:	fa02 f201 	lsl.w	r2, r2, r1
1a0014e8:	fa00 fa01 	lsl.w	sl, r0, r1
1a0014ec:	d908      	bls.n	1a001500 <__udivmoddi4+0x244>
1a0014ee:	18ed      	adds	r5, r5, r3
1a0014f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0014f4:	d243      	bcs.n	1a00157e <__udivmoddi4+0x2c2>
1a0014f6:	42ac      	cmp	r4, r5
1a0014f8:	d941      	bls.n	1a00157e <__udivmoddi4+0x2c2>
1a0014fa:	f1a9 0902 	sub.w	r9, r9, #2
1a0014fe:	441d      	add	r5, r3
1a001500:	1b2d      	subs	r5, r5, r4
1a001502:	fa1f fe8e 	uxth.w	lr, lr
1a001506:	fbb5 f0fc 	udiv	r0, r5, ip
1a00150a:	fb0c 5510 	mls	r5, ip, r0, r5
1a00150e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a001512:	fb00 f808 	mul.w	r8, r0, r8
1a001516:	45a0      	cmp	r8, r4
1a001518:	d907      	bls.n	1a00152a <__udivmoddi4+0x26e>
1a00151a:	18e4      	adds	r4, r4, r3
1a00151c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
1a001520:	d229      	bcs.n	1a001576 <__udivmoddi4+0x2ba>
1a001522:	45a0      	cmp	r8, r4
1a001524:	d927      	bls.n	1a001576 <__udivmoddi4+0x2ba>
1a001526:	3802      	subs	r0, #2
1a001528:	441c      	add	r4, r3
1a00152a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00152e:	eba4 0408 	sub.w	r4, r4, r8
1a001532:	fba0 8902 	umull	r8, r9, r0, r2
1a001536:	454c      	cmp	r4, r9
1a001538:	46c6      	mov	lr, r8
1a00153a:	464d      	mov	r5, r9
1a00153c:	d315      	bcc.n	1a00156a <__udivmoddi4+0x2ae>
1a00153e:	d012      	beq.n	1a001566 <__udivmoddi4+0x2aa>
1a001540:	b156      	cbz	r6, 1a001558 <__udivmoddi4+0x29c>
1a001542:	ebba 030e 	subs.w	r3, sl, lr
1a001546:	eb64 0405 	sbc.w	r4, r4, r5
1a00154a:	fa04 f707 	lsl.w	r7, r4, r7
1a00154e:	40cb      	lsrs	r3, r1
1a001550:	431f      	orrs	r7, r3
1a001552:	40cc      	lsrs	r4, r1
1a001554:	6037      	str	r7, [r6, #0]
1a001556:	6074      	str	r4, [r6, #4]
1a001558:	2100      	movs	r1, #0
1a00155a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00155e:	4618      	mov	r0, r3
1a001560:	e6f8      	b.n	1a001354 <__udivmoddi4+0x98>
1a001562:	4690      	mov	r8, r2
1a001564:	e6e0      	b.n	1a001328 <__udivmoddi4+0x6c>
1a001566:	45c2      	cmp	sl, r8
1a001568:	d2ea      	bcs.n	1a001540 <__udivmoddi4+0x284>
1a00156a:	ebb8 0e02 	subs.w	lr, r8, r2
1a00156e:	eb69 0503 	sbc.w	r5, r9, r3
1a001572:	3801      	subs	r0, #1
1a001574:	e7e4      	b.n	1a001540 <__udivmoddi4+0x284>
1a001576:	4628      	mov	r0, r5
1a001578:	e7d7      	b.n	1a00152a <__udivmoddi4+0x26e>
1a00157a:	4640      	mov	r0, r8
1a00157c:	e791      	b.n	1a0014a2 <__udivmoddi4+0x1e6>
1a00157e:	4681      	mov	r9, r0
1a001580:	e7be      	b.n	1a001500 <__udivmoddi4+0x244>
1a001582:	4601      	mov	r1, r0
1a001584:	e778      	b.n	1a001478 <__udivmoddi4+0x1bc>
1a001586:	3802      	subs	r0, #2
1a001588:	443c      	add	r4, r7
1a00158a:	e745      	b.n	1a001418 <__udivmoddi4+0x15c>
1a00158c:	4608      	mov	r0, r1
1a00158e:	e708      	b.n	1a0013a2 <__udivmoddi4+0xe6>
1a001590:	f1a8 0802 	sub.w	r8, r8, #2
1a001594:	443d      	add	r5, r7
1a001596:	e72b      	b.n	1a0013f0 <__udivmoddi4+0x134>

1a001598 <__aeabi_idiv0>:
1a001598:	4770      	bx	lr
1a00159a:	bf00      	nop

1a00159c <memset>:
1a00159c:	4402      	add	r2, r0
1a00159e:	4603      	mov	r3, r0
1a0015a0:	4293      	cmp	r3, r2
1a0015a2:	d100      	bne.n	1a0015a6 <memset+0xa>
1a0015a4:	4770      	bx	lr
1a0015a6:	f803 1b01 	strb.w	r1, [r3], #1
1a0015aa:	e7f9      	b.n	1a0015a0 <memset+0x4>

1a0015ac <UART_BClock>:
1a0015ac:	01c2 01a2 0182 0162                         ......b.

1a0015b4 <UART_PClock>:
1a0015b4:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a0015c4:	00ff 0000                                   ....

1a0015c8 <periph_to_base>:
1a0015c8:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a0015d8:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a0015e8:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a0015f8:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001608:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a001618:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a001628:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a001634 <InitClkStates>:
1a001634:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a001644:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a001654:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001664:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001674:	111a 0001 111b 0001                         ........

1a00167c <ExtRateIn>:
1a00167c:	0000 0000                                   ....

1a001680 <OscRateIn>:
1a001680:	1b00 00b7                                   ....

1a001684 <gpioLEDBits>:
1a001684:	0e00 0b01 0c01 0005 0105 0205               ............

1a001690 <InitClkStates>:
1a001690:	0308 0001 0307 0001 0f01 0101               ............

1a00169c <pinmuxing>:
1a00169c:	0a02 0040 0b02 0040 0c02 0040 0002 0044     ..@...@...@...D.
1a0016ac:	0102 0044 0202 0044 0302 0052 0402 0052     ..D...D...R...R.
1a0016bc:	0509 0052 0609 0057 0206 0057 0001 0050     ..R...W...W...P.
1a0016cc:	0101 0050 0201 0050 0601 0050 0f01 00f3     ..P...P...P.....
1a0016dc:	1001 00f7 1101 00f3 1201 00b3 1301 00f0     ................
1a0016ec:	1401 00b3 0707 00b6 0000 00f2 0100 00b6     ................

1a0016fc <gpioPinsConfig>:
1a0016fc:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a00170c:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a00171c:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a00172c:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a00173c:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a00174c:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a00175c:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a00176c:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a00177c:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a00178c:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a00179c:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a0017ac:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a0017bc:	0000 0109 0006 0901 0a02 0000 020e 000b     ................
1a0017cc:	0b01 0c02 0100 020c 0400 0005 0102 0504     ................
1a0017dc:	0201 0402 0205 0004 0200 0400 0001 0102     ................
1a0017ec:	0204 0200 0402 0003 0302 0307 0300 070b     ................
1a0017fc:	0004 0c03 0507 0300 070d 0006 0e03 0102     ................
1a00180c:	0504 0401 0006 0602 0504 0200 0405 0004     ................
1a00181c:	0402 0804 0504 040c 0409 0d05 0a04 0504     ................
1a00182c:	010e 0005 0801 ffff                         ........
